# ==========================================
# MERN Authentication System Configuration
# ==========================================

# Server Configuration
PORT=5000
NODE_ENV=development
LOG_LEVEL=info

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/javacourse
# Alternative MongoDB Atlas connection:
# MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/javacourse?retryWrites=true&w=majority

# Frontend Configuration
FRONTEND_URL=http://localhost:5173
# Production frontend URL:
# FRONTEND_URL=https://yourdomain.com

# JWT Configuration
JWT_ACCESS_SECRET=your-super-secret-access-token-key-change-in-production-minimum-32-characters
JWT_REFRESH_SECRET=your-super-secret-refresh-token-key-change-in-production-minimum-32-characters
JWT_ACCESS_EXPIRY=15m
JWT_REFRESH_EXPIRY=7d

# Legacy JWT (for backward compatibility)
JWT_SECRET=your-super-secret-jwt-key-change-in-production

# Google OAuth 2.0 Configuration
# Get these from Google Cloud Console: https://console.cloud.google.com/
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_CALLBACK_URL=http://localhost:5000/api/auth/google/callback
# Production callback URL:
# GOOGLE_CALLBACK_URL=https://yourdomain.com/api/auth/google/callback

# Security Configuration
BCRYPT_SALT_ROUNDS=12
SESSION_SECRET=your-session-secret-change-in-production

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# CORS Configuration
CORS_ORIGIN=http://localhost:5173
# Multiple origins (comma-separated):
# CORS_ORIGIN=http://localhost:3000,http://localhost:5173,https://yourdomain.com

# Email Configuration (for notifications)
EMAIL_SERVICE=gmail
EMAIL_USER=your-email@gmail.com
EMAIL_PASS=your-app-password
EMAIL_FROM=noreply@yourdomain.com

# File Upload Configuration
MAX_FILE_SIZE=10485760
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,image/webp,application/pdf,text/plain

# Cloudinary Configuration (for file storage)
CLOUDINARY_CLOUD_NAME=your-cloudinary-cloud-name
CLOUDINARY_API_KEY=your-cloudinary-api-key
CLOUDINARY_API_SECRET=your-cloudinary-api-secret

# Redis Configuration (optional, for session storage)
REDIS_URL=redis://localhost:6379
# Redis Cloud:
# REDIS_URL=redis://username:password@host:port

# Monitoring and Analytics
SENTRY_DSN=your-sentry-dsn-for-error-tracking
ANALYTICS_TRACKING_ID=your-google-analytics-tracking-id

# API Keys for Third-party Services
STRIPE_SECRET_KEY=sk_test_your-stripe-secret-key
STRIPE_PUBLISHABLE_KEY=pk_test_your-stripe-publishable-key

# ==========================================
# SETUP INSTRUCTIONS
# ==========================================

# 1. Google OAuth Setup:
#    - Go to Google Cloud Console
#    - Create a new project or select existing
#    - Enable Google+ API
#    - Create OAuth 2.0 credentials
#    - Add authorized redirect URIs:
#      * http://localhost:5000/api/auth/google/callback (development)
#      * https://yourdomain.com/api/auth/google/callback (production)
#    - Copy Client ID and Client Secret to GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET

# 2. JWT Secrets:
#    - Generate strong random strings (minimum 32 characters)
#    - Use different secrets for access and refresh tokens
#    - Never commit real secrets to version control

# 3. MongoDB Setup:
#    - Install MongoDB locally or use MongoDB Atlas
#    - Update MONGODB_URI with your connection string
#    - Create database: javacourse

# 4. Environment Variables:
#    - Copy this file to .env
#    - Fill in all required values
#    - Never commit .env file to version control

# 5. Production Deployment:
#    - Set NODE_ENV=production
#    - Use strong, unique secrets
#    - Configure proper CORS origins
#    - Set up SSL/TLS certificates
#    - Configure proper logging
#    - Set up monitoring and alerts