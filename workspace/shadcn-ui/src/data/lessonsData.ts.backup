// Import types from new modular structure
import { LessonContent } from './types/LessonTypes';

// Import extracted lessons
import { lesson_1_1, lesson_1_2 } from './lessons/module-01';

export const lessonsDatabase: Record<string, LessonContent> = {
  // Module 1: Java Fundamentals
  'lesson-1-1': lesson_1_1,
  'lesson-1-2': lesson_1_2,

  'lesson-1-3': {
    title: 'Your First Java Program',
    type: 'coding',
    duration: '35 min',
    module: 'Java Fundamentals',
    content: {
      overview: 'Dive into hands-on Java programming by creating, understanding, and executing your first Java programs. This lesson demystifies the anatomy of Java applications, explores the compilation and execution process, and establishes the foundation for all future Java development. You\'ll learn the essential program structure, understand key components, and master the development workflow that professional Java developers use every day.',
      objectives: [
        'Create and understand the classic Hello World program and its significance in programming',
        'Master the essential components of Java program structure: classes, methods, and statements',
        'Understand the main method signature, its parameters, and its role as the program entry point',
        'Learn the complete compilation and execution workflow from source code to running application',
        'Explore Java naming conventions and best practices for professional code',
        'Understand the relationship between source files, class files, and the JVM',
        'Practice writing, compiling, and running multiple Java programs with increasing complexity'
      ],
      theory: `
        <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 rounded-lg mb-8 shadow-2xl">
          <h1 class="text-3xl font-bold m-0 flex items-center">
            <span class="w-3 h-10 bg-white rounded mr-4"></span>
            Your First Java Program
          </h1>
          <p class="mt-3 text-blue-100 text-lg">From source code to running application - understanding the Java development lifecycle</p>
        </div>

        <div class="space-y-8">
          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-blue-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">1</span>
              Anatomy of a Java Program
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed text-lg">
                Every Java program follows a specific, structured format that enables the JVM to understand and execute your code. 
                Understanding this structure is crucial for becoming a proficient Java developer.
              </p>
              <div class="bg-gray-50 p-4 rounded-lg font-mono text-sm border">
                <div class="text-blue-600">// File: HelloWorld.java</div>
                <div><span class="text-purple-600">public class</span> HelloWorld {</div>
                <div class="ml-4">
                  <span class="text-purple-600">public static void</span> main(<span class="text-green-600">String[] args</span>) {
                </div>
                <div class="ml-8">
                  <span class="text-orange-600">System.out.println</span>(<span class="text-red-600">"Hello, World!"</span>);
                </div>
                <div class="ml-4">}</div>
                <div>}</div>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-green-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-green-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">2</span>
              Program Components Explained
            </h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div class="space-y-4">
                <div class="bg-blue-50 p-4 rounded-lg">
                  <h4 class="font-bold text-blue-800 mb-2">üì¶ Class Declaration</h4>
                  <p class="text-blue-700 text-sm mb-2"><code>public class HelloWorld</code></p>
                  <ul class="text-xs text-blue-600 space-y-1">
                    <li>‚Ä¢ Every Java program needs at least one class</li>
                    <li>‚Ä¢ Class name must match filename exactly</li>
                    <li>‚Ä¢ <code>public</code> means accessible from anywhere</li>
                  </ul>
                </div>
                <div class="bg-green-50 p-4 rounded-lg">
                  <h4 class="font-bold text-green-800 mb-2">üöÄ Main Method</h4>
                  <p class="text-green-700 text-sm mb-2"><code>public static void main(String[] args)</code></p>
                  <ul class="text-xs text-green-600 space-y-1">
                    <li>‚Ä¢ Entry point of every Java application</li>
                    <li>‚Ä¢ <code>static</code> - can be called without creating an object</li>
                    <li>‚Ä¢ <code>void</code> - doesn't return any value</li>
                  </ul>
                </div>
              </div>
              <div class="space-y-4">
                <div class="bg-purple-50 p-4 rounded-lg">
                  <h4 class="font-bold text-purple-800 mb-2">üí¨ Statements</h4>
                  <p class="text-purple-700 text-sm mb-2"><code>System.out.println("Hello, World!");</code></p>
                  <ul class="text-xs text-purple-600 space-y-1">
                    <li>‚Ä¢ Instructions that perform actions</li>
                    <li>‚Ä¢ Must end with semicolon (;)</li>
                    <li>‚Ä¢ <code>System.out.println</code> displays text</li>
                  </ul>
                </div>
                <div class="bg-orange-50 p-4 rounded-lg">
                  <h4 class="font-bold text-orange-800 mb-2">üî§ String Literals</h4>
                  <p class="text-orange-700 text-sm mb-2"><code>"Hello, World!"</code></p>
                  <ul class="text-xs text-orange-600 space-y-1">
                    <li>‚Ä¢ Text enclosed in double quotes</li>
                    <li>‚Ä¢ Exactly as written, character by character</li>
                    <li>‚Ä¢ Can contain letters, numbers, symbols</li>
                  </ul>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-purple-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-purple-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">3</span>
              The Compilation Process
            </h2>
            <div class="space-y-4">
              <div class="flex items-center justify-between bg-gray-50 p-4 rounded-lg">
                <div class="text-center">
                  <div class="bg-blue-500 text-white rounded-lg p-3 mb-2">üìù</div>
                  <h4 class="font-bold text-gray-800">Source Code</h4>
                  <p class="text-gray-600 text-sm">HelloWorld.java</p>
                </div>
                <div class="text-2xl text-gray-400">‚Üí</div>
                <div class="text-center">
                  <div class="bg-green-500 text-white rounded-lg p-3 mb-2">‚öôÔ∏è</div>
                  <h4 class="font-bold text-gray-800">Java Compiler</h4>
                  <p class="text-gray-600 text-sm">javac command</p>
                </div>
                <div class="text-2xl text-gray-400">‚Üí</div>
                <div class="text-center">
                  <div class="bg-purple-500 text-white rounded-lg p-3 mb-2">üì¶</div>
                  <h4 class="font-bold text-gray-800">Bytecode</h4>
                  <p class="text-gray-600 text-sm">HelloWorld.class</p>
                </div>
                <div class="text-2xl text-gray-400">‚Üí</div>
                <div class="text-center">
                  <div class="bg-red-500 text-white rounded-lg p-3 mb-2">‚ñ∂Ô∏è</div>
                  <h4 class="font-bold text-gray-800">JVM Execution</h4>
                  <p class="text-gray-600 text-sm">java command</p>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-orange-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-orange-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">4</span>
              Java Naming Conventions
            </h2>
            <div class="overflow-x-auto">
              <table class="w-full text-sm border border-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="text-left p-3 font-bold border-b">Element</th>
                    <th class="text-left p-3 font-bold border-b">Convention</th>
                    <th class="text-left p-3 font-bold border-b">Example</th>
                    <th class="text-left p-3 font-bold border-b">Rule</th>
                  </tr>
                </thead>
                <tbody>
                  <tr class="border-b">
                    <td class="p-3">Class Names</td>
                    <td class="p-3">PascalCase</td>
                    <td class="p-3 font-mono">HelloWorld, Calculator</td>
                    <td class="p-3">Start with uppercase, capitalize each word</td>
                  </tr>
                  <tr class="border-b bg-gray-50">
                    <td class="p-3">Method Names</td>
                    <td class="p-3">camelCase</td>
                    <td class="p-3 font-mono">main, calculateArea</td>
                    <td class="p-3">Start lowercase, capitalize subsequent words</td>
                  </tr>
                  <tr class="border-b">
                    <td class="p-3">File Names</td>
                    <td class="p-3">Match Class</td>
                    <td class="p-3 font-mono">HelloWorld.java</td>
                    <td class="p-3">Exactly same as public class name</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </section>

          <section class="bg-gradient-to-r from-gray-100 to-gray-200 p-6 rounded-lg">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">üí° Professional Development Tips</h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div>
                <h4 class="font-bold text-gray-800 mb-3">‚úÖ Best Practices</h4>
                <ul class="space-y-2 text-gray-700">
                  <li>‚Ä¢ Always use meaningful class and method names</li>
                  <li>‚Ä¢ Add comments to explain complex logic</li>
                  <li>‚Ä¢ Follow Java naming conventions consistently</li>
                  <li>‚Ä¢ Keep your code properly indented and formatted</li>
                  <li>‚Ä¢ Test your programs with different inputs</li>
                </ul>
              </div>
              <div>
                <h4 class="font-bold text-gray-800 mb-3">üö´ Common Mistakes</h4>
                <ul class="space-y-2 text-gray-700">
                  <li>‚Ä¢ Forgetting semicolons at end of statements</li>
                  <li>‚Ä¢ Mismatching class name with filename</li>
                  <li>‚Ä¢ Incorrect main method signature</li>
                  <li>‚Ä¢ Missing or mismatched braces { }</li>
                  <li>‚Ä¢ Case sensitivity errors in class/method names</li>
                </ul>
              </div>
            </div>
          </section>
        </div>
      `,
      codeExample: `/**
 * HelloWorldProgression.java
 * 
 * This comprehensive example demonstrates the evolution of Java programs
 * from the simplest "Hello World" to more complex applications. It shows:
 * - Basic program structure and syntax
 * - Output formatting and text manipulation
 * - Multiple methods and code organization
 * - Comments and documentation best practices
 * - Real-world programming patterns
 * 
 * Each section builds upon the previous, showing progressive complexity
 * while maintaining clean, professional code standards.
 */

public class HelloWorldProgression {
    
    /**
     * The main method - entry point of the Java application
     * This method demonstrates various ways to output information
     * and showcases fundamental Java programming concepts.
     * 
     * @param args Command line arguments (not used in this example)
     */
    public static void main(String[] args) {
        // Section 1: Basic Output
        displayWelcomeMessage();
        
        // Section 2: Formatted Output
        displayFormattedInformation();
        
        // Section 3: Interactive Content
        displayProgrammingJourney();
        
        // Section 4: System Information
        displaySystemInfo();
        
        // Section 5: Closing Message
        displayMotivationalMessage();
    }
    
    /**
     * Displays a basic welcome message
     * Demonstrates simple string output and basic formatting
     */
    private static void displayWelcomeMessage() {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë          Welcome to Java!           ‚ïë");
        System.out.println("‚ïë      Your Programming Journey        ‚ïë");
        System.out.println("‚ïë           Starts Here               ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println(); // Empty line for spacing
    }
    
    /**
     * Demonstrates formatted output and string concatenation
     * Shows how to combine text with dynamic content
     */
    private static void displayFormattedInformation() {
        String programName = "HelloWorldProgression";
        String language = "Java";
        int currentYear = 2024;
        
        System.out.println("üìã Program Information:");
        System.out.println("   Program Name: " + programName);
        System.out.println("   Language: " + language);
        System.out.println("   Year: " + currentYear);
        System.out.println("   Status: ‚úÖ Running Successfully!");
        System.out.println();
    }
    
    /**
     * Shows the programming learning journey
     * Demonstrates multi-line output with structured information
     */
    private static void displayProgrammingJourney() {
        System.out.println("üöÄ Your Java Learning Path:");
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ Step 1: ‚úÖ Environment Setup       ‚îÇ");
        System.out.println("‚îÇ Step 2: ‚û°Ô∏è  First Program (Current) ‚îÇ");
        System.out.println("‚îÇ Step 3: ‚è≥ Variables & Data Types   ‚îÇ");
        System.out.println("‚îÇ Step 4: ‚è≥ Control Structures       ‚îÇ");
        System.out.println("‚îÇ Step 5: ‚è≥ Object-Oriented Programming‚îÇ");
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        System.out.println();
        
        // Show learning statistics
        System.out.println("üìä Learning Progress:");
        System.out.println("   ‚Ä¢ Lessons Completed: 2/69");
        System.out.println("   ‚Ä¢ Current Module: Java Fundamentals");
        System.out.println("   ‚Ä¢ Next Milestone: Variables & Data Types");
        System.out.println();
    }
    
    /**
     * Displays basic system information
     * Demonstrates accessing system properties in Java
     */
    private static void displaySystemInfo() {
        System.out.println("üíª System Information:");
        System.out.println("   Java Version: " + System.getProperty("java.version"));
        System.out.println("   Operating System: " + System.getProperty("os.name"));
        System.out.println("   User: " + System.getProperty("user.name"));
        System.out.println("   Current Directory: " + System.getProperty("user.dir"));
        System.out.println();
    }
    
    /**
     * Displays an encouraging message for new programmers
     * Shows how to create engaging, motivational output
     */
    private static void displayMotivationalMessage() {
        System.out.println("üåü Congratulations!");
        System.out.println("You've just created and run your first Java program!");
        System.out.println();
        System.out.println("üí° What you've learned:");
        System.out.println("   ‚úÖ Java program structure (class, main method)");
        System.out.println("   ‚úÖ Output statements (System.out.println)");
        System.out.println("   ‚úÖ String literals and text formatting");
        System.out.println("   ‚úÖ Method organization and documentation");
        System.out.println("   ‚úÖ Professional coding practices");
        System.out.println();
        System.out.println("üéØ Next Steps:");
        System.out.println("   1. Experiment with different text outputs");
        System.out.println("   2. Try modifying the messages");
        System.out.println("   3. Add your own methods");
        System.out.println("   4. Move on to variables and data types!");
        System.out.println();
        System.out.println("Happy Coding! üöÄüë®‚Äçüíªüë©‚Äçüíª");
        
        // ASCII Art for fun!
        System.out.println();
        System.out.println("    ‚òï    ‚òï    ‚òï");
        System.out.println("   JAVA  JAVA  JAVA");
    }
}

// ===================================================================
// ADDITIONAL EXAMPLES - Different Program Styles
// ===================================================================

/**
 * SimpleGreeting.java - A basic greeting program
 * Demonstrates the minimal structure of a Java program
 */
class SimpleGreeting {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
        System.out.println("Welcome to Java Programming!");
    }
}

/**
 * PersonalizedGreeting.java - Interactive-style output
 * Shows how to create more engaging, personalized programs
 */
class PersonalizedGreeting {
    public static void main(String[] args) {
        // Student information (in later lessons, we'll get this from user input)
        String studentName = "Alex Johnson";
        String course = "Java Fundamentals";
        int lessonNumber = 3;
        
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë                 Personal Greeting                    ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println();
        System.out.println("üëã Hello, " + studentName + "!");
        System.out.println("üìö You're currently studying: " + course);
        System.out.println("üìñ This is lesson #" + lessonNumber + " - Your First Java Program");
        System.out.println("‚≠ê Keep up the great work!");
        System.out.println();
        System.out.println("üéØ Today's Goals:");
        System.out.println("   ‚Ä¢ Understand Java program structure");
        System.out.println("   ‚Ä¢ Learn about the main method");
        System.out.println("   ‚Ä¢ Practice writing and running code");
        System.out.println("   ‚Ä¢ Build confidence in Java programming");
    }
}

/*
 * EXPECTED PROGRAM OUTPUT:
 * 
 * ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 * ‚ïë          Welcome to Java!           ‚ïë
 * ‚ïë      Your Programming Journey        ‚ïë
 * ‚ïë           Starts Here               ‚ïë
 * ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 * 
 * üìã Program Information:
 *    Program Name: HelloWorldProgression
 *    Language: Java
 *    Year: 2024
 *    Status: ‚úÖ Running Successfully!
 * 
 * üöÄ Your Java Learning Path:
 * ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
 * ‚îÇ Step 1: ‚úÖ Environment Setup       ‚îÇ
 * ‚îÇ Step 2: ‚û°Ô∏è  First Program (Current) ‚îÇ
 * ‚îÇ Step 3: ‚è≥ Variables & Data Types   ‚îÇ
 * ‚îÇ Step 4: ‚è≥ Control Structures       ‚îÇ
 * ‚îÇ Step 5: ‚è≥ Object-Oriented Programming‚îÇ
 * ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
 * 
 * üìä Learning Progress:
 *    ‚Ä¢ Lessons Completed: 2/69
 *    ‚Ä¢ Current Module: Java Fundamentals
 *    ‚Ä¢ Next Milestone: Variables & Data Types
 * 
 * üíª System Information:
 *    Java Version: 17.0.2
 *    Operating System: Windows 10
 *    User: StudentName
 *    Current Directory: C:\JavaProjects
 * 
 * üåü Congratulations!
 * You've just created and run your first Java program!
 * 
 * üí° What you've learned:
 *    ‚úÖ Java program structure (class, main method)
 *    ‚úÖ Output statements (System.out.println)
 *    ‚úÖ String literals and text formatting
 *    ‚úÖ Method organization and documentation
 *    ‚úÖ Professional coding practices
 * 
 * üéØ Next Steps:
 *    1. Experiment with different text outputs
 *    2. Try modifying the messages
 *    3. Add your own methods
 *    4. Move on to variables and data types!
 * 
 * Happy Coding! üöÄüë®‚Äçüíªüë©‚Äçüíª
 * 
 *     ‚òï    ‚òï    ‚òï
 *    JAVA  JAVA  JAVA
 */`,
      exercise: `
        **üèóÔ∏è First Java Program Development Challenge**
        
        This hands-on exercise will solidify your understanding of Java program structure and give you practical experience creating professional-quality Java applications.
        
        **Part 1: Recreation and Understanding (25 minutes)**
        
        1. **Recreate the Hello World Program (10 minutes):**
           - Create a new file called \`HelloWorld.java\`
           - Type the basic Hello World program from memory
           - Compile it using: \`javac HelloWorld.java\`
           - Run it using: \`java HelloWorld\`
           - Take a screenshot of the successful output
        
        2. **Program Structure Analysis (15 minutes):**
           - Identify each component: class declaration, main method, statements
           - Explain in your own words what each part does
           - List what happens if you change the class name without changing the filename
           - Document what each keyword means: \`public\`, \`static\`, \`void\`
        
        **Part 2: Personal Information Program (30 minutes)**
        
        Create a program called \`AboutMe.java\` that displays comprehensive information about you:
        
        **Requirements:**
        - Your full name and preferred nickname
        - Your age and location (city/state)
        - Your educational background
        - Your programming experience level (beginner, intermediate, etc.)
        - Your favorite hobby or interest
        - Why you want to learn Java
        - Your career goals in technology
        - A fun fact about yourself
        
        **Technical Requirements:**
        - Use proper Java naming conventions
        - Include comprehensive documentation comments
        - Create at least 3 separate methods (like the examples)
        - Use attractive ASCII art or formatting
        - Include proper spacing and visual organization
        
        **Part 3: Interactive Learning Tracker (35 minutes)**
        
        Create a program called \`LearningTracker.java\` that simulates a learning dashboard:
        
        **Features to implement:**
        - Display current date and time information
        - Show your learning progress (lessons completed, current module)
        - List your learning goals for this week
        - Display study schedule and time commitments
        - Show programming languages you want to learn
        - Include motivational messages and progress indicators
        
        **Advanced Features:**
        - Create methods for different sections of information
        - Use string concatenation to create dynamic content
        - Include system information (like the examples)
        - Add visual elements using ASCII characters
        - Create a professional-looking output format
        
        **Part 4: Creative Programming Challenge (30 minutes)**
        
        Choose ONE of the following creative challenges:
        
        **Option A: ASCII Art Gallery**
        - Create a program that displays multiple ASCII art pieces
        - Include your name in ASCII art
        - Add descriptions for each piece
        - Use methods to organize different artworks
        
        **Option B: Virtual Business Card**
        - Design a program that displays a professional business card
        - Include contact information, skills, and experience
        - Make it visually appealing with borders and formatting
        - Add social media handles and portfolio links
        
        **Option C: Learning Journey Map**
        - Create a visual representation of your programming journey
        - Show where you started, where you are now, and where you're going
        - Include milestones, achievements, and future goals
        - Use creative formatting and visual indicators
        
        **Part 5: Code Review and Documentation (20 minutes)**
        
        1. **Self-Review Process:**
           - Check all programs compile and run without errors
           - Verify proper naming conventions are followed
           - Ensure code is properly formatted and indented
           - Add any missing comments or documentation
        
        2. **Create a Documentation File:**
           - Write a README.md file describing each program
           - Include compilation and execution instructions
           - Document any challenges you faced and how you solved them
           - List what you learned from each exercise
        
        **üìã Deliverables:**
        
        Submit the following files:
        1. \`HelloWorld.java\` - Basic recreation
        2. \`AboutMe.java\` - Personal information program
        3. \`LearningTracker.java\` - Learning dashboard
        4. One creative challenge program
        5. \`README.md\` - Documentation and reflection
        6. Screenshots of all programs running successfully
        
        **üéØ Success Criteria:**
        
        Your programs should demonstrate:
        - ‚úÖ Correct Java syntax and program structure
        - ‚úÖ Proper naming conventions and code formatting
        - ‚úÖ Multiple methods with clear purposes
        - ‚úÖ Professional documentation and comments
        - ‚úÖ Creative problem-solving and personal expression
        - ‚úÖ Successful compilation and execution
        - ‚úÖ Clean, readable, and well-organized code
        
        **üí° Bonus Challenges:**
        
        1. **Error Handling Exploration:** Intentionally make syntax errors and document the error messages you receive
        2. **Method Variations:** Create methods that take parameters (we'll learn this formally later)
        3. **Code Optimization:** Find ways to make your code more concise while maintaining readability
        4. **Version Control:** Initialize a Git repository and commit your programs
        5. **IDE Integration:** Try running your programs in different IDEs and compare the experience
        
        **üìö Learning Outcomes:**
        
        By completing this exercise, you will:
        - Master the fundamental structure of Java programs
        - Gain confidence in writing, compiling, and running Java code
        - Understand the importance of naming conventions and code organization
        - Practice professional documentation and commenting
        - Develop problem-solving skills through hands-on programming
        - Build a portfolio of your first Java programs
        - Establish good programming habits from the beginning
        
        **üöÄ Next Steps:**
        
        After completing this exercise:
        - Keep your programs as reference for future lessons
        - Experiment with modifying the code to see different outputs
        - Share your creative programs with fellow students
        - Prepare for the next lesson on Variables and Data Types
        - Continue practicing with additional small programs on your own
        
        Remember: Every expert programmer started with "Hello, World!" - you're now officially on your way to Java mastery!
      `
    }
  },

  'lesson-1-4': {
    title: 'Variables and Data Types',
    type: 'lesson',
    duration: '40 min',
    module: 'Java Fundamentals',
    content: {
      overview: 'Master the foundation of all Java programming: variables and data types. This comprehensive lesson explores how Java stores and manipulates different kinds of information, from simple numbers and text to complex objects. You\'ll understand memory allocation, type safety, and the crucial differences between primitive and reference types that every professional Java developer must know.',
      objectives: [
        'Master all eight primitive data types: byte, short, int, long, float, double, boolean, and char',
        'Understand memory allocation, ranges, and default values for each primitive type',
        'Learn variable declaration, initialization, and naming conventions for professional code',
        'Explore reference types and understand the difference between stack and heap memory',
        'Master type conversion, casting, and understand when automatic promotion occurs',
        'Work with String variables and understand string immutability',
        'Learn constants using final keyword and understand their importance in software design',
        'Practice variable scope, lifetime, and best practices for variable management'
      ],
      theory: `
        <div class="bg-gradient-to-r from-emerald-600 to-blue-600 text-white p-6 rounded-lg mb-8 shadow-2xl">
          <h1 class="text-3xl font-bold m-0 flex items-center">
            <span class="w-3 h-10 bg-white rounded mr-4"></span>
            Variables and Data Types
          </h1>
          <p class="mt-3 text-emerald-100 text-lg">The building blocks of every Java program - storing and manipulating data</p>
        </div>

        <div class="space-y-8">
          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-emerald-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-emerald-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">1</span>
              What are Variables?
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed text-lg">
                Variables are named memory locations that store data values. Think of them as labeled containers 
                that hold different types of information your program needs to remember and manipulate. Every variable 
                in Java has a <strong>type</strong>, a <strong>name</strong>, and a <strong>value</strong>.
              </p>
              <div class="bg-emerald-50 p-4 rounded-lg border-l-4 border-emerald-400">
                <h4 class="font-bold text-emerald-800 mb-2">üí° Real-World Analogy</h4>
                <p class="text-emerald-700">Variables are like labeled boxes in a warehouse. Each box (variable) has a label (name), can hold specific types of items (data type), and contains actual items (values). The warehouse manager (Java compiler) ensures you only put the right type of items in each box.</p>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-blue-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">2</span>
              Primitive Data Types
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed">Java provides eight primitive data types that represent the most basic kinds of data. These are stored directly in memory and have fixed sizes.</p>
              <div class="overflow-x-auto">
                <table class="w-full text-sm border border-gray-200 rounded-lg">
                  <thead class="bg-blue-50">
                    <tr>
                      <th class="text-left p-3 font-bold text-blue-800">Type</th>
                      <th class="text-left p-3 font-bold text-blue-800">Size</th>
                      <th class="text-left p-3 font-bold text-blue-800">Range</th>
                      <th class="text-left p-3 font-bold text-blue-800">Default</th>
                      <th class="text-left p-3 font-bold text-blue-800">Example</th>
                    </tr>
                  </thead>
                  <tbody class="divide-y divide-gray-200">
                    <tr>
                      <td class="p-3 font-mono text-blue-600">byte</td>
                      <td class="p-3">8 bits</td>
                      <td class="p-3">-128 to 127</td>
                      <td class="p-3">0</td>
                      <td class="p-3 font-mono">byte age = 25;</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-mono text-blue-600">short</td>
                      <td class="p-3">16 bits</td>
                      <td class="p-3">-32,768 to 32,767</td>
                      <td class="p-3">0</td>
                      <td class="p-3 font-mono">short year = 2024;</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-mono text-blue-600">int</td>
                      <td class="p-3">32 bits</td>
                      <td class="p-3">-2.1B to 2.1B</td>
                      <td class="p-3">0</td>
                      <td class="p-3 font-mono">int population = 1000000;</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-mono text-blue-600">long</td>
                      <td class="p-3">64 bits</td>
                      <td class="p-3">-9.2E18 to 9.2E18</td>
                      <td class="p-3">0L</td>
                      <td class="p-3 font-mono">long distance = 123456789L;</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-mono text-blue-600">float</td>
                      <td class="p-3">32 bits</td>
                      <td class="p-3">¬±3.4E38 (7 digits)</td>
                      <td class="p-3">0.0f</td>
                      <td class="p-3 font-mono">float price = 19.99f;</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-mono text-blue-600">double</td>
                      <td class="p-3">64 bits</td>
                      <td class="p-3">¬±1.8E308 (15 digits)</td>
                      <td class="p-3">0.0</td>
                      <td class="p-3 font-mono">double pi = 3.14159265;</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-mono text-blue-600">boolean</td>
                      <td class="p-3">1 bit</td>
                      <td class="p-3">true or false</td>
                      <td class="p-3">false</td>
                      <td class="p-3 font-mono">boolean isActive = true;</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-mono text-blue-600">char</td>
                      <td class="p-3">16 bits</td>
                      <td class="p-3">0 to 65,535 (Unicode)</td>
                      <td class="p-3">'\u0000'</td>
                      <td class="p-3 font-mono">char grade = 'A';</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-purple-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-purple-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">3</span>
              Variable Declaration and Initialization
            </h2>
            <div class="space-y-4">
              <div class="grid md:grid-cols-2 gap-6">
                <div class="bg-purple-50 p-4 rounded-lg">
                  <h4 class="font-bold text-purple-800 mb-3">üìù Declaration Syntax</h4>
                  <div class="space-y-2">
                    <div class="bg-white p-2 rounded border font-mono text-sm">
                      <span class="text-blue-600">dataType</span> <span class="text-green-600">variableName</span>;
                    </div>
                    <div class="bg-white p-2 rounded border font-mono text-sm">
                      <span class="text-blue-600">int</span> <span class="text-green-600">studentAge</span>;
                    </div>
                    <div class="bg-white p-2 rounded border font-mono text-sm">
                      <span class="text-blue-600">String</span> <span class="text-green-600">firstName</span>;
                    </div>
                  </div>
                </div>
                <div class="bg-green-50 p-4 rounded-lg">
                  <h4 class="font-bold text-green-800 mb-3">üéØ Initialization</h4>
                  <div class="space-y-2">
                    <div class="bg-white p-2 rounded border font-mono text-sm">
                      <span class="text-blue-600">int</span> <span class="text-green-600">count</span> = <span class="text-red-600">10</span>;
                    </div>
                    <div class="bg-white p-2 rounded border font-mono text-sm">
                      <span class="text-blue-600">String</span> <span class="text-green-600">name</span> = <span class="text-red-600">"Alice"</span>;
                    </div>
                    <div class="bg-white p-2 rounded border font-mono text-sm">
                      <span class="text-blue-600">boolean</span> <span class="text-green-600">isReady</span> = <span class="text-red-600">true</span>;
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                <h4 class="font-bold text-yellow-800 mb-2">‚ö†Ô∏è Important Rules</h4>
                <ul class="space-y-1 text-yellow-700 text-sm">
                  <li>‚Ä¢ Variables must be declared before use</li>
                  <li>‚Ä¢ Local variables must be initialized before reading</li>
                  <li>‚Ä¢ Variable names are case-sensitive (age ‚â† Age)</li>
                  <li>‚Ä¢ Cannot use Java keywords as variable names</li>
                  <li>‚Ä¢ Must start with letter, _, or $ (not numbers)</li>
                </ul>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-indigo-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-indigo-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">4</span>
              Reference Types vs Primitive Types
            </h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div class="bg-blue-50 p-4 rounded-lg">
                <h4 class="font-bold text-blue-800 mb-3">üî¢ Primitive Types</h4>
                <ul class="space-y-2 text-blue-700 text-sm">
                  <li>‚Ä¢ Stored directly in memory (stack)</li>
                  <li>‚Ä¢ Fixed size and fast access</li>
                  <li>‚Ä¢ Passed by value to methods</li>
                  <li>‚Ä¢ Cannot be null</li>
                  <li>‚Ä¢ Have default values when uninitialized</li>
                </ul>
                <div class="bg-white p-2 rounded border mt-3 font-mono text-xs">
                  int x = 42; // x contains 42 directly
                </div>
              </div>
              <div class="bg-green-50 p-4 rounded-lg">
                <h4 class="font-bold text-green-800 mb-3">üì¶ Reference Types</h4>
                <ul class="space-y-2 text-green-700 text-sm">
                  <li>‚Ä¢ Store memory addresses (references)</li>
                  <li>‚Ä¢ Objects stored in heap memory</li>
                  <li>‚Ä¢ Passed by reference to methods</li>
                  <li>‚Ä¢ Can be null (no object)</li>
                  <li>‚Ä¢ Default value is null</li>
                </ul>
                <div class="bg-white p-2 rounded border mt-3 font-mono text-xs">
                  String s = "Hello"; // s points to object
                </div>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-orange-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-orange-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">5</span>
              Type Conversion and Casting
            </h2>
            <div class="space-y-4">
              <div class="grid md:grid-cols-2 gap-6">
                <div class="bg-green-50 p-4 rounded-lg">
                  <h4 class="font-bold text-green-800 mb-3">‚úÖ Implicit Conversion (Widening)</h4>
                  <p class="text-green-700 text-sm mb-3">Java automatically converts smaller types to larger types:</p>
                  <div class="bg-white p-3 rounded border font-mono text-xs space-y-1">
                    <div>byte ‚Üí short ‚Üí int ‚Üí long</div>
                    <div>float ‚Üí double</div>
                    <div>char ‚Üí int</div>
                  </div>
                  <div class="bg-white p-2 rounded border mt-2 font-mono text-xs">
                    int i = 100;<br/>
                    long l = i; // automatic widening
                  </div>
                </div>
                <div class="bg-red-50 p-4 rounded-lg">
                  <h4 class="font-bold text-red-800 mb-3">‚ö†Ô∏è Explicit Casting (Narrowing)</h4>
                  <p class="text-red-700 text-sm mb-3">Must explicitly cast when converting larger to smaller types:</p>
                  <div class="bg-white p-3 rounded border font-mono text-xs space-y-1">
                    <div>double ‚Üí float ‚Üí long ‚Üí int ‚Üí short ‚Üí byte</div>
                  </div>
                  <div class="bg-white p-2 rounded border mt-2 font-mono text-xs">
                    double d = 3.14;<br/>
                    int i = (int) d; // explicit casting
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-red-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">6</span>
              Constants and Final Variables
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed">Constants are variables whose values cannot be changed after initialization. Use the <code>final</code> keyword to create constants.</p>
              <div class="grid md:grid-cols-2 gap-6">
                <div class="bg-blue-50 p-4 rounded-lg">
                  <h4 class="font-bold text-blue-800 mb-3">üìå Local Constants</h4>
                  <div class="bg-white p-3 rounded border font-mono text-sm">
                    final int MAX_STUDENTS = 30;<br/>
                    final double PI = 3.14159;
                  </div>
                </div>
                <div class="bg-green-50 p-4 rounded-lg">
                  <h4 class="font-bold text-green-800 mb-3">üè¢ Class Constants</h4>
                  <div class="bg-white p-3 rounded border font-mono text-sm">
                    public static final String COMPANY = "TechCorp";<br/>
                    public static final int VERSION = 1;
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-green-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-green-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">7</span>
              Variable Naming Conventions
            </h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div class="space-y-3">
                <div class="bg-green-50 p-3 rounded-lg">
                  <h4 class="font-bold text-green-800 text-sm">‚úÖ Good Naming Practices</h4>
                  <div class="space-y-1 text-xs text-green-700 font-mono">
                    <div>studentAge (camelCase)</div>
                    <div>firstName</div>
                    <div>totalScore</div>
                    <div>isComplete</div>
                    <div>MAX_SIZE (constants)</div>
                  </div>
                </div>
              </div>
              <div class="space-y-3">
                <div class="bg-red-50 p-3 rounded-lg">
                  <h4 class="font-bold text-red-800 text-sm">‚ùå Poor Naming Practices</h4>
                  <div class="space-y-1 text-xs text-red-700 font-mono">
                    <div>a, b, x, temp (unclear)</div>
                    <div>student_age (not camelCase)</div>
                    <div>123name (starts with number)</div>
                    <div>class (reserved keyword)</div>
                    <div>myvariablename (no separation)</div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-gradient-to-r from-gray-100 to-gray-200 p-6 rounded-lg">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">üí° Professional Development Tips</h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div>
                <h4 class="font-bold text-gray-800 mb-3">‚úÖ Best Practices</h4>
                <ul class="space-y-2 text-gray-700">
                  <li>‚Ä¢ Choose descriptive variable names that explain their purpose</li>
                  <li>‚Ä¢ Initialize variables when you declare them when possible</li>
                  <li>‚Ä¢ Use the smallest data type that fits your needs</li>
                  <li>‚Ä¢ Use constants for values that won't change</li>
                  <li>‚Ä¢ Group related variable declarations together</li>
                  <li>‚Ä¢ Use meaningful names even for temporary variables</li>
                </ul>
              </div>
              <div>
                <h4 class="font-bold text-gray-800 mb-3">üö´ Common Mistakes</h4>
                <ul class="space-y-2 text-gray-700">
                  <li>‚Ä¢ Using variables before initialization</li>
                  <li>‚Ä¢ Choosing inappropriate data types (byte when int needed)</li>
                  <li>‚Ä¢ Losing precision in type conversions</li>
                  <li>‚Ä¢ Using single-letter variable names in production code</li>
                  <li>‚Ä¢ Forgetting 'L' suffix for long literals</li>
                  <li>‚Ä¢ Confusing = (assignment) with == (comparison)</li>
                </ul>
              </div>
            </div>
          </section>
        </div>
      `,
      codeExample: `/**
 * DataTypesComprehensive.java
 * 
 * This comprehensive program demonstrates all Java primitive data types,
 * variable declaration patterns, type conversion, and best practices.
 * It shows:
 * - All eight primitive data types with practical examples
 * - Variable declaration, initialization, and naming conventions
 * - Type conversion and casting operations
 * - Constants and final variables
 * - Memory usage and performance considerations
 * - Real-world scenarios for each data type
 * 
 * This example serves as a complete reference for Java data types
 * and demonstrates professional coding practices.
 */

public class DataTypesComprehensive {
    
    // Class-level constants (accessible throughout the class)
    public static final String COMPANY_NAME = "TechEducation Inc.";
    public static final int CURRENT_YEAR = 2024;
    public static final double PI = 3.14159265359;
    
    public static void main(String[] args) {
        printProgramHeader();
        demonstratePrimitiveTypes();
        demonstrateTypeConversion();
        demonstrateStringVariables();
        demonstrateConstants();
        demonstrateVariableScope();
        demonstrateMemoryUsage();
        printProgramFooter();
    }
    
    /**
     * Display program header with title and purpose
     */
    private static void printProgramHeader() {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë           üìä JAVA DATA TYPES COMPREHENSIVE DEMO             ‚ïë");
        System.out.println("‚ïë                Variables, Types, and Memory                  ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  This program demonstrates:                                  ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ All primitive data types and their usage                 ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Variable declaration and initialization                   ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Type conversion and casting                               ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Constants and naming conventions                         ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Memory considerations and best practices                 ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println();
    }
    
    /**
     * Demonstrate all primitive data types with practical examples
     */
    private static void demonstratePrimitiveTypes() {
        System.out.println("üî∏ PRIMITIVE DATA TYPES DEMONSTRATION");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Integer types
        byte studentAge = 20;           // Small numbers (-128 to 127)
        short populationThousands = 1500; // Medium numbers (-32K to 32K)
        int cityPopulation = 1000000;   // Standard integers
        long worldPopulation = 8000000000L; // Large numbers (note the L suffix)
        
        // Floating-point types
        float itemPrice = 29.99f;       // Single precision (note the f suffix)
        double scientificValue = 6.022e23; // Double precision, scientific notation
        
        // Character and boolean
        char grade = 'A';               // Single character in quotes
        boolean isPassed = true;        // true or false only
        
        System.out.println("   Integer Types:");
        System.out.println("   ‚îî‚îÄ byte studentAge = " + studentAge + " (range: -128 to 127)");
        System.out.println("   ‚îî‚îÄ short populationThousands = " + populationThousands + " (range: -32K to 32K)");
        System.out.println("   ‚îî‚îÄ int cityPopulation = " + cityPopulation + " (range: -2.1B to 2.1B)");
        System.out.println("   ‚îî‚îÄ long worldPopulation = " + worldPopulation + " (range: huge!)");
        
        System.out.println();
        System.out.println("   Floating-Point Types:");
        System.out.println("   ‚îî‚îÄ float itemPrice = " + itemPrice + " (7 decimal digits precision)");
        System.out.println("   ‚îî‚îÄ double scientificValue = " + scientificValue + " (15 decimal digits precision)");
        
        System.out.println();
        System.out.println("   Other Types:");
        System.out.println("   ‚îî‚îÄ char grade = '" + grade + "' (single Unicode character)");
        System.out.println("   ‚îî‚îÄ boolean isPassed = " + isPassed + " (true or false only)");
        
        // Demonstrate default values
        System.out.println();
        System.out.println("   üìã Default Values (when not initialized):");
        System.out.println("   ‚îî‚îÄ int default: 0");
        System.out.println("   ‚îî‚îÄ double default: 0.0");
        System.out.println("   ‚îî‚îÄ boolean default: false");
        System.out.println("   ‚îî‚îÄ char default: '\\u0000' (null character)");
        System.out.println();
    }
    
    /**
     * Demonstrate type conversion and casting with practical examples
     */
    private static void demonstrateTypeConversion() {
        System.out.println("üî∏ TYPE CONVERSION AND CASTING");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Automatic widening conversion (safe)
        byte smallNumber = 100;
        int largerNumber = smallNumber;  // Automatic conversion
        long evenLarger = largerNumber;  // Another automatic conversion
        double decimal = evenLarger;     // int to double conversion
        
        System.out.println("   ‚úÖ Automatic Widening Conversions:");
        System.out.println("   ‚îî‚îÄ byte(" + smallNumber + ") ‚Üí int(" + largerNumber + ") ‚Üí long(" + evenLarger + ") ‚Üí double(" + decimal + ")");
        
        // Explicit casting (narrowing) - potentially loses data
        double preciseValue = 3.14159;
        float lessePrecise = (float) preciseValue;    // Explicit cast required
        int wholeNumber = (int) preciseValue;         // Truncates decimal part
        byte tinyNumber = (byte) wholeNumber;         // Could overflow
        
        System.out.println();
        System.out.println("   ‚ö†Ô∏è Explicit Casting (Narrowing):");
        System.out.println("   ‚îî‚îÄ double(" + preciseValue + ") ‚Üí float(" + lessePrecise + ") ‚Üí int(" + wholeNumber + ") ‚Üí byte(" + tinyNumber + ")");
        System.out.println("   ‚îî‚îÄ Note: Precision may be lost during narrowing conversions!");
        
        // Character to number conversion
        char letterA = 'A';
        int asciiValue = letterA;  // Automatic widening
        char backToChar = (char) asciiValue;  // Explicit casting
        
        System.out.println();
        System.out.println("   üî§ Character-Number Conversions:");
        System.out.println("   ‚îî‚îÄ char('" + letterA + "') ‚Üí int(" + asciiValue + ") ‚Üí char('" + backToChar + "')");
        System.out.println();
    }
    
    /**
     * Demonstrate String variables and their special characteristics
     */
    private static void demonstrateStringVariables() {
        System.out.println("üî∏ STRING VARIABLES AND IMMUTABILITY");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // String creation and immutability
        String greeting = "Hello";
        String name = "Java";
        String message = greeting + ", " + name + "!";  // Creates new String object
        
        System.out.println("   üìù String Creation:");
        System.out.println("   ‚îî‚îÄ greeting = \"" + greeting + "\"");
        System.out.println("   ‚îî‚îÄ name = \"" + name + "\"");
        System.out.println("   ‚îî‚îÄ message = \"" + message + "\" (concatenation creates new String)");
        
        // String comparison demonstration
        String str1 = new String("Hello");
        String str2 = new String("Hello");
        String str3 = "Hello";
        String str4 = "Hello";
        
        System.out.println();
        System.out.println("   üîç String Comparison:");
        System.out.println("   ‚îî‚îÄ str1 == str2: " + (str1 == str2) + " (different objects)");
        System.out.println("   ‚îî‚îÄ str1.equals(str2): " + str1.equals(str2) + " (same content)");
        System.out.println("   ‚îî‚îÄ str3 == str4: " + (str3 == str4) + " (string pool optimization)");
        
        // String methods demonstration
        String sample = "  Java Programming  ";
        System.out.println();
        System.out.println("   üõ†Ô∏è String Methods:");
        System.out.println("   ‚îî‚îÄ Original: \"" + sample + "\"");
        System.out.println("   ‚îî‚îÄ Length: " + sample.length());
        System.out.println("   ‚îî‚îÄ Trimmed: \"" + sample.trim() + "\"");
        System.out.println("   ‚îî‚îÄ Uppercase: \"" + sample.trim().toUpperCase() + "\"");
        System.out.println("   ‚îî‚îÄ Contains 'Program': " + sample.contains("Program"));
        System.out.println();
    }
    
    /**
     * Demonstrate constants and final variables
     */
    private static void demonstrateConstants() {
        System.out.println("üî∏ CONSTANTS AND FINAL VARIABLES");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Local constants
        final int MAX_STUDENTS_PER_CLASS = 30;
        final double PASS_PERCENTAGE = 60.0;
        final String SCHOOL_NAME = "Tech University";
        
        System.out.println("   üìå Local Constants:");
        System.out.println("   ‚îî‚îÄ MAX_STUDENTS_PER_CLASS = " + MAX_STUDENTS_PER_CLASS);
        System.out.println("   ‚îî‚îÄ PASS_PERCENTAGE = " + PASS_PERCENTAGE + "%");
        System.out.println("   ‚îî‚îÄ SCHOOL_NAME = \"" + SCHOOL_NAME + "\"");
        
        // Demonstrate class constants
        System.out.println();
        System.out.println("   üè¢ Class Constants (static final):");
        System.out.println("   ‚îî‚îÄ COMPANY_NAME = \"" + COMPANY_NAME + "\"");
        System.out.println("   ‚îî‚îÄ CURRENT_YEAR = " + CURRENT_YEAR);
        System.out.println("   ‚îî‚îÄ PI = " + PI);
        
        // Mathematical calculations using constants
        double radius = 5.0;
        double area = PI * radius * radius;
        System.out.println();
        System.out.println("   üßÆ Using Constants in Calculations:");
        System.out.println("   ‚îî‚îÄ Circle area with radius " + radius + " = " + area);
        System.out.println();
    }
    
    /**
     * Demonstrate variable scope and lifetime concepts
     */
    private static void demonstrateVariableScope() {
        System.out.println("üî∏ VARIABLE SCOPE AND LIFETIME");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Method scope variables
        int methodVariable = 100;
        System.out.println("   üìç Method Scope Variable: " + methodVariable);
        
        // Block scope demonstration
        if (true) {
            int blockVariable = 200;  // Only exists within this block
            System.out.println("   üì¶ Block Scope Variable: " + blockVariable);
            System.out.println("   üì¶ Can access method variable: " + methodVariable);
        }
        // blockVariable is not accessible here
        
        // Loop scope
        for (int i = 0; i < 3; i++) {
            int loopVariable = i * 10;  // New variable each iteration
            System.out.println("   üîÑ Loop iteration " + i + ", loopVariable = " + loopVariable);
        }
        // i and loopVariable are not accessible here
        
        System.out.println("   ‚îî‚îÄ Variables exist only within their scope blocks");
        System.out.println();
    }
    
    /**
     * Show memory usage and performance considerations
     */
    private static void demonstrateMemoryUsage() {
        System.out.println("üî∏ MEMORY USAGE AND PERFORMANCE");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Primitive vs reference memory demonstration
        int primitiveInt = 42;           // Stored on stack
        Integer wrapperInt = 42;         // Object stored on heap
        String shortString = "Hi";       // Reference to heap object
        
        System.out.println("   üíæ Memory Storage:");
        System.out.println("   ‚îî‚îÄ int primitiveInt: stored directly on stack (fast)");
        System.out.println("   ‚îî‚îÄ Integer wrapperInt: reference on stack, object on heap");
        System.out.println("   ‚îî‚îÄ String shortString: reference on stack, object on heap");
        
        // Show memory efficient practices
        System.out.println();
        System.out.println("   ‚ö° Performance Tips:");
        System.out.println("   ‚îî‚îÄ Use primitives when possible (faster than wrapper classes)");
        System.out.println("   ‚îî‚îÄ Choose appropriate data type size (don't use long for small numbers)");
        System.out.println("   ‚îî‚îÄ Initialize variables at declaration when possible");
        System.out.println("   ‚îî‚îÄ Use StringBuilder for multiple string concatenations");
        System.out.println();
    }
    
    /**
     * Display program footer with summary
     */
    private static void printProgramFooter() {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë                üéâ DATA TYPES DEMONSTRATION COMPLETE! üéâ     ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  You've mastered Java's fundamental data types:             ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  ‚úÖ All 8 primitive types and their characteristics         ‚ïë");
        System.out.println("‚ïë  ‚úÖ Variable declaration and initialization                  ‚ïë");
        System.out.println("‚ïë  ‚úÖ Type conversion and casting                              ‚ïë");
        System.out.println("‚ïë  ‚úÖ String handling and immutability                        ‚ïë");
        System.out.println("‚ïë  ‚úÖ Constants and naming conventions                        ‚ïë");
        System.out.println("‚ïë  ‚úÖ Memory management and performance considerations         ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  Next: Learn operators and expressions!                     ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
    }
}

/*
 * EXPECTED PROGRAM OUTPUT (ABBREVIATED):
 * 
 * ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 * ‚ïë           üìä JAVA DATA TYPES COMPREHENSIVE DEMO             ‚ïë
 * ‚ïë                Variables, Types, and Memory                  ‚ïë
 * ‚ïë  This program demonstrates:                                  ‚ïë
 * ‚ïë  ‚Ä¢ All primitive data types and their usage                 ‚ïë
 * ‚ïë  ‚Ä¢ Variable declaration and initialization                   ‚ïë
 * ‚ïë  ‚Ä¢ Type conversion and casting                               ‚ïë
 * ‚ïë  ‚Ä¢ Constants and naming conventions                         ‚ïë
 * ‚ïë  ‚Ä¢ Memory considerations and best practices                 ‚ïë
 * ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 * 
 * üî∏ PRIMITIVE DATA TYPES DEMONSTRATION
 *    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 *    Integer Types:
 *    ‚îî‚îÄ byte studentAge = 20 (range: -128 to 127)
 *    ‚îî‚îÄ short populationThousands = 1500 (range: -32K to 32K)
 *    ‚îî‚îÄ int cityPopulation = 1000000 (range: -2.1B to 2.1B)
 *    ‚îî‚îÄ long worldPopulation = 8000000000 (range: huge!)
 * 
 *    Floating-Point Types:
 *    ‚îî‚îÄ float itemPrice = 29.99 (7 decimal digits precision)
 *    ‚îî‚îÄ double scientificValue = 6.022E23 (15 decimal digits precision)
 * 
 *    Other Types:
 *    ‚îî‚îÄ char grade = 'A' (single Unicode character)
 *    ‚îî‚îÄ boolean isPassed = true (true or false only)
 * 
 * ... (additional output sections)
 */`,
      exercise: `
        **üìä Complete Data Types Mastery Challenge**
        
        This comprehensive exercise will solidify your understanding of Java variables and data types through hands-on programming and real-world applications.
        
        **Part 1: Data Type Exploration (30 minutes)**
        
        1. **Primitive Types Program (15 minutes):**
           Create a program called \`DataTypeExplorer.java\` that:
           - Declares one variable of each primitive type
           - Initializes them with meaningful values (student age, school population, etc.)
           - Displays each variable with its type, value, and size information
           - Shows the minimum and maximum values for each numeric type
           - Use meaningful variable names following Java conventions
        
        2. **Range Testing (15 minutes):**
           - Create variables at the edge of their ranges (e.g., byte = 127, byte = -128)
           - Attempt to assign values outside the range and document what happens
           - Test overflow behavior: what happens when you add 1 to Byte.MAX_VALUE?
           - Demonstrate underflow: what happens when you subtract 1 from Byte.MIN_VALUE?
        
        **Part 2: Type Conversion Mastery (35 minutes)**
        
        1. **Conversion Practice (20 minutes):**
           Create a program called \`TypeConverter.java\` that demonstrates:
           - All possible automatic widening conversions
           - Various explicit casting operations
           - Precision loss examples (double to float, float to int)
           - Character-to-number conversions with practical examples
           - Safe vs unsafe conversions
        
        2. **Real-World Scenarios (15 minutes):**
           - Convert temperature from Celsius (double) to Fahrenheit (int)
           - Convert a student's percentage (double) to letter grade (char)
           - Parse user input: convert String "123" to int (research Integer.parseInt())
           - Handle money: convert dollars (double) to cents (int)
        
        **Part 3: String Manipulation Workshop (40 minutes)**
        
        1. **String Basics (20 minutes):**
           Create a program called \`StringWorkshop.java\` that:
           - Creates strings using different methods (literal, new String(), concatenation)
           - Demonstrates string immutability with before/after examples
           - Shows proper string comparison using equals() vs ==
           - Implements various string operations: length, substring, indexOf, etc.
        
        2. **Practical String Processing (20 minutes):**
           - Parse a full name string to extract first and last names
           - Validate email address format (basic check: contains @ and .)
           - Convert a sentence to title case (first letter of each word capitalized)
           - Count vowels and consonants in a given sentence/word
           - Format currency values with proper decimal places
           - Create a simple text analysis tool that counts characters, words, and sentences
        
        **Part 4: Constants and Memory Optimization (25 minutes)**
        
        1. **Constants Practice (15 minutes):**
           Create a program called \`MathConstants.java\` that:
           - Defines mathematical constants (PI, E, golden ratio, etc.)
           - Physics constants (speed of light, gravity, etc.)
           - Application constants (max users, default timeout, etc.)
           - Demonstrates using these constants in calculations
           - Shows the difference between local and class constants
        
        2. **Memory Efficiency Challenge (10 minutes):**
           - Compare memory usage of different data types for the same logical data
           - When would you use byte vs int for age storage?
           - How does choice of data type affect array memory usage?
           - Create examples showing appropriate data type selection
        
        **üìã Deliverables:**
        
        Submit well-documented Java programs:
        1. \`DataTypeExplorer.java\` - Comprehensive primitive type demonstration
        2. \`TypeConverter.java\` - Type conversion and casting examples
        3. \`StringWorkshop.java\` - String manipulation and processing
        4. \`MathConstants.java\` - Constants and calculations
        5. Documentation explaining your findings and lessons learned
        
        **üéØ Success Criteria:**
        
        Your programs should demonstrate:
        - ‚úÖ Correct usage of all primitive data types
        - ‚úÖ Safe and unsafe type conversions with proper handling
        - ‚úÖ Effective string processing and manipulation
        - ‚úÖ Proper constant definition and usage
        - ‚úÖ Professional naming conventions and code organization
        - ‚úÖ Comprehensive documentation and comments
        - ‚úÖ Real-world applications of data type concepts
        
        **üí° Advanced Challenges:**
        
        1. **Performance Analysis:** Time different approaches to string concatenation
        2. **Memory Profiling:** Research and document memory usage of different data types
        3. **Precision Studies:** Explore floating-point precision issues and solutions
        4. **Unicode Exploration:** Work with international characters and emojis
        5. **Wrapper Classes:** Research Integer, Double, Boolean wrapper classes and autoboxing
        
        **üìö Key Takeaways:**
        
        After this exercise, you'll understand:
        - How to choose appropriate data types for different scenarios
        - The importance of type safety and proper conversion handling
        - String immutability and its implications for performance
        - The role of constants in creating maintainable code
        - Memory considerations in variable selection
        - Professional practices for variable naming and organization
        
        This foundation in variables and data types will support everything you build in Java from simple calculations to complex enterprise applications!
      `
    }
  },

  'lesson-1-5': {
    title: 'Operators in Java',
    type: 'lesson',
    duration: '35 min',
    module: 'Java Fundamentals',
    content: {
      overview: 'Master all types of operators in Java including arithmetic, comparison, logical, and assignment operators. This comprehensive lesson explores operator precedence, associativity, and practical applications in real-world programming scenarios. You\'ll understand how operators work at the bit level and learn advanced techniques for efficient computation.',
      objectives: [
        'Master all arithmetic operators: +, -, *, /, % and understand their behavior with different data types',
        'Learn comparison operators and their proper usage with primitives and objects',
        'Understand logical operators: &&, ||, ! and short-circuit evaluation',
        'Master assignment operators and compound assignment shortcuts',
        'Learn unary operators: ++, --, +, - and understand pre/post increment differences',
        'Understand operator precedence and associativity rules for complex expressions',
        'Explore bitwise operators and their applications in system programming'
      ],
      theory: `
        <div class="bg-gradient-to-r from-orange-600 to-red-600 text-white p-6 rounded-lg mb-8 shadow-2xl">
          <h1 class="text-3xl font-bold m-0 flex items-center">
            <span class="w-3 h-10 bg-white rounded mr-4"></span>
            Operators in Java
          </h1>
          <p class="mt-3 text-orange-100 text-lg">The building blocks of computation - performing operations on data</p>
        </div>

        <div class="space-y-8">
          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-orange-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-orange-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">1</span>
              Arithmetic Operators
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed text-lg">
                Arithmetic operators perform mathematical calculations on numeric data types. Java provides five basic 
                arithmetic operators, each with specific behavior for different data types and edge cases.
              </p>
              <div class="overflow-x-auto">
                <table class="w-full text-sm border border-gray-200 rounded-lg">
                  <thead class="bg-orange-50">
                    <tr>
                      <th class="text-left p-3 font-bold text-orange-800">Operator</th>
                      <th class="text-left p-3 font-bold text-orange-800">Name</th>
                      <th class="text-left p-3 font-bold text-orange-800">Example</th>
                      <th class="text-left p-3 font-bold text-orange-800">Result</th>
                      <th class="text-left p-3 font-bold text-orange-800">Notes</th>
                    </tr>
                  </thead>
                  <tbody class="divide-y divide-gray-200">
                    <tr>
                      <td class="p-3 font-mono text-blue-600">+</td>
                      <td class="p-3">Addition</td>
                      <td class="p-3 font-mono">5 + 3</td>
                      <td class="p-3 font-mono">8</td>
                      <td class="p-3">Also used for string concatenation</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-mono text-blue-600">-</td>
                      <td class="p-3">Subtraction</td>
                      <td class="p-3 font-mono">5 - 3</td>
                      <td class="p-3 font-mono">2</td>
                      <td class="p-3">Can be unary (negative sign)</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-mono text-blue-600">*</td>
                      <td class="p-3">Multiplication</td>
                      <td class="p-3 font-mono">5 * 3</td>
                      <td class="p-3 font-mono">15</td>
                      <td class="p-3">Watch for overflow with large numbers</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-mono text-blue-600">/</td>
                      <td class="p-3">Division</td>
                      <td class="p-3 font-mono">7 / 3</td>
                      <td class="p-3 font-mono">2</td>
                      <td class="p-3">Integer division truncates decimal</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-mono text-blue-600">%</td>
                      <td class="p-3">Modulus</td>
                      <td class="p-3 font-mono">7 % 3</td>
                      <td class="p-3 font-mono">1</td>
                      <td class="p-3">Remainder after division</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-blue-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">2</span>
              Comparison and Logical Operators
            </h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div class="bg-blue-50 p-4 rounded-lg">
                <h4 class="font-bold text-blue-800 mb-3">üîç Comparison Operators</h4>
                <div class="space-y-2">
                  <div class="bg-white p-2 rounded border font-mono text-sm space-y-1">
                    <div><span class="text-blue-600">==</span> equal to</div>
                    <div><span class="text-blue-600">!=</span> not equal to</div>
                    <div><span class="text-blue-600">&gt;</span> greater than</div>
                    <div><span class="text-blue-600">&lt;</span> less than</div>
                    <div><span class="text-blue-600">&gt;=</span> greater than or equal</div>
                    <div><span class="text-blue-600">&lt;=</span> less than or equal</div>
                  </div>
                </div>
              </div>
              <div class="bg-green-50 p-4 rounded-lg">
                <h4 class="font-bold text-green-800 mb-3">üß† Logical Operators</h4>
                <div class="space-y-2">
                  <div class="bg-white p-2 rounded border font-mono text-sm space-y-1">
                    <div><span class="text-green-600">&&</span> logical AND</div>
                    <div><span class="text-green-600">||</span> logical OR</div>
                    <div><span class="text-green-600">!</span> logical NOT</div>
                    <div><span class="text-green-600">&</span> bitwise AND</div>
                    <div><span class="text-green-600">|</span> bitwise OR</div>
                    <div><span class="text-green-600">^</span> bitwise XOR</div>
                  </div>
                </div>
              </div>
            </div>
            <div class="bg-yellow-50 p-4 rounded-lg border border-yellow-200 mt-4">
              <h4 class="font-bold text-yellow-800 mb-2">‚ö° Short-Circuit Evaluation</h4>
              <p class="text-yellow-700 text-sm">Logical operators <code>&&</code> and <code>||</code> use short-circuit evaluation: if the result can be determined from the left operand, the right operand is not evaluated. This is crucial for performance and avoiding errors.</p>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-purple-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-purple-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">3</span>
              Assignment and Unary Operators
            </h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div class="bg-purple-50 p-4 rounded-lg">
                <h4 class="font-bold text-purple-800 mb-3">üìù Assignment Operators</h4>
                <div class="space-y-2">
                  <div class="bg-white p-2 rounded border font-mono text-sm space-y-1">
                    <div><span class="text-purple-600">=</span> simple assignment</div>
                    <div><span class="text-purple-600">+=</span> add and assign</div>
                    <div><span class="text-purple-600">-=</span> subtract and assign</div>
                    <div><span class="text-purple-600">*=</span> multiply and assign</div>
                    <div><span class="text-purple-600">/=</span> divide and assign</div>
                    <div><span class="text-purple-600">%=</span> modulus and assign</div>
                  </div>
                </div>
              </div>
              <div class="bg-red-50 p-4 rounded-lg">
                <h4 class="font-bold text-red-800 mb-3">üîÑ Unary Operators</h4>
                <div class="space-y-2">
                  <div class="bg-white p-2 rounded border font-mono text-sm space-y-1">
                    <div><span class="text-red-600">++</span> increment by 1</div>
                    <div><span class="text-red-600">--</span> decrement by 1</div>
                    <div><span class="text-red-600">+</span> unary plus</div>
                    <div><span class="text-red-600">-</span> unary minus</div>
                    <div><span class="text-red-600">!</span> logical complement</div>
                    <div><span class="text-red-600">~</span> bitwise complement</div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-indigo-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-indigo-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">4</span>
              Operator Precedence and Associativity
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed">Understanding operator precedence is crucial for writing correct expressions. When multiple operators appear in an expression, Java follows specific rules to determine evaluation order.</p>
              <div class="overflow-x-auto">
                <table class="w-full text-sm border border-gray-200 rounded-lg">
                  <thead class="bg-indigo-50">
                    <tr>
                      <th class="text-left p-3 font-bold text-indigo-800">Precedence</th>
                      <th class="text-left p-3 font-bold text-indigo-800">Operators</th>
                      <th class="text-left p-3 font-bold text-indigo-800">Associativity</th>
                      <th class="text-left p-3 font-bold text-indigo-800">Example</th>
                    </tr>
                  </thead>
                  <tbody class="divide-y divide-gray-200">
                    <tr>
                      <td class="p-3 font-bold">1 (Highest)</td>
                      <td class="p-3 font-mono">++ -- + - ! ~</td>
                      <td class="p-3">Right to Left</td>
                      <td class="p-3 font-mono">++x, -y</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-bold">2</td>
                      <td class="p-3 font-mono">* / %</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a * b / c</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-bold">3</td>
                      <td class="p-3 font-mono">+ -</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a + b - c</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-bold">4</td>
                      <td class="p-3 font-mono">&lt; &lt;= &gt; &gt;=</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a &lt; b &lt;= c</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-bold">5</td>
                      <td class="p-3 font-mono">== !=</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a == b != c</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-bold">6</td>
                      <td class="p-3 font-mono">&&</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a && b && c</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-bold">7</td>
                      <td class="p-3 font-mono">||</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a || b || c</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-bold">8 (Lowest)</td>
                      <td class="p-3 font-mono">= += -= *= /= %=</td>
                      <td class="p-3">Right to Left</td>
                      <td class="p-3 font-mono">a = b += c</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-green-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-green-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">5</span>
              Increment and Decrement Operators
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed">The increment (++) and decrement (--) operators are unique because they can be used in prefix or postfix position, with different behavior for each.</p>
              <div class="grid md:grid-cols-2 gap-6">
                <div class="bg-green-50 p-4 rounded-lg">
                  <h4 class="font-bold text-green-800 mb-3">üìà Prefix (++x, --x)</h4>
                  <div class="bg-white p-3 rounded border space-y-2">
                    <div class="font-mono text-sm">int x = 5;</div>
                    <div class="font-mono text-sm">int y = ++x; // x becomes 6, y gets 6</div>
                    <div class="text-xs text-green-600">Increment first, then use value</div>
                  </div>
                </div>
                <div class="bg-blue-50 p-4 rounded-lg">
                  <h4 class="font-bold text-blue-800 mb-3">üìâ Postfix (x++, x--)</h4>
                  <div class="bg-white p-3 rounded border space-y-2">
                    <div class="font-mono text-sm">int x = 5;</div>
                    <div class="font-mono text-sm">int y = x++; // y gets 5, x becomes 6</div>
                    <div class="text-xs text-blue-600">Use current value, then increment</div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-red-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">6</span>
              Bitwise Operators
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed">Bitwise operators work on individual bits of integer values. These are powerful tools for system programming, optimization, and working with flags.</p>
              <div class="grid md:grid-cols-2 gap-6">
                <div class="space-y-3">
                  <div class="bg-red-50 p-3 rounded-lg">
                    <h5 class="font-bold text-red-800 text-sm">Basic Bitwise Operations</h5>
                    <div class="bg-white p-2 rounded border font-mono text-xs space-y-1">
                      <div><span class="text-red-600">&</span> AND: 1101 & 1011 = 1001</div>
                      <div><span class="text-red-600">|</span> OR:  1101 | 1011 = 1111</div>
                      <div><span class="text-red-600">^</span> XOR: 1101 ^ 1011 = 0110</div>
                      <div><span class="text-red-600">~</span> NOT: ~1101 = 0010</div>
                    </div>
                  </div>
                </div>
                <div class="space-y-3">
                  <div class="bg-orange-50 p-3 rounded-lg">
                    <h5 class="font-bold text-orange-800 text-sm">Shift Operations</h5>
                    <div class="bg-white p-2 rounded border font-mono text-xs space-y-1">
                      <div><span class="text-orange-600">&lt;&lt;</span> Left shift: x &lt;&lt; 2 (multiply by 4)</div>
                      <div><span class="text-orange-600">&gt;&gt;</span> Right shift: x &gt;&gt; 2 (divide by 4)</div>
                      <div><span class="text-orange-600">&gt;&gt;&gt;</span> Unsigned right shift</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-gradient-to-r from-gray-100 to-gray-200 p-6 rounded-lg">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">üí° Professional Usage Tips</h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div>
                <h4 class="font-bold text-gray-800 mb-3">‚úÖ Best Practices</h4>
                <ul class="space-y-2 text-gray-700">
                  <li>‚Ä¢ Use parentheses to clarify complex expressions</li>
                  <li>‚Ä¢ Prefer compound assignment operators (+=, -=) for readability</li>
                  <li>‚Ä¢ Use logical && and || for boolean conditions</li>
                  <li>‚Ä¢ Be careful with floating-point equality comparisons</li>
                  <li>‚Ä¢ Use meaningful variable names in expressions</li>
                </ul>
              </div>
              <div>
                <h4 class="font-bold text-gray-800 mb-3">üö´ Common Pitfalls</h4>
                <ul class="space-y-2 text-gray-700">
                  <li>‚Ä¢ Confusing = (assignment) with == (comparison)</li>
                  <li>‚Ä¢ Integer division truncation: 5/2 = 2, not 2.5</li>
                  <li>‚Ä¢ Mixing pre/post increment in complex expressions</li>
                  <li>‚Ä¢ Division by zero causing runtime exceptions</li>
                  <li>‚Ä¢ Forgetting operator precedence in complex expressions</li>
                </ul>
              </div>
            </div>
          </section>
        </div>
      `,
      codeExample: `/**
 * OperatorsComprehensive.java
 * 
 * This comprehensive program demonstrates all Java operators and their
 * practical applications in real-world programming scenarios. It covers:
 * - All arithmetic operations with different data types
 * - Comparison operators with primitives and objects
 * - Logical operators and short-circuit evaluation
 * - Assignment operators and compound assignments
 * - Unary operators including pre/post increment
 * - Bitwise operations and practical applications
 * - Operator precedence and expression evaluation
 * 
 * Each section includes detailed examples and explanations of behavior,
 * edge cases, and best practices for professional development.
 */

public class OperatorsComprehensive {
    
    public static void main(String[] args) {
        printProgramHeader();
        demonstrateArithmeticOperators();
        demonstrateComparisonOperators();
        demonstrateLogicalOperators();
        demonstrateAssignmentOperators();
        demonstrateUnaryOperators();
        demonstrateBitwiseOperators();
        demonstrateOperatorPrecedence();
        demonstratePracticalApplications();
        printProgramFooter();
    }
    
    /**
     * Display program header with title and overview
     */
    private static void printProgramHeader() {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë               üßÆ JAVA OPERATORS COMPREHENSIVE DEMO          ‚ïë");
        System.out.println("‚ïë                   All Operators in Action                   ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  This program demonstrates:                                  ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Arithmetic, comparison, and logical operators            ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Assignment and unary operators                           ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Bitwise operations and practical applications            ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Operator precedence and expression evaluation           ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println();
    }
    
    /**
     * Demonstrate all arithmetic operators with different data types
     */
    private static void demonstrateArithmeticOperators() {
        System.out.println("üî∏ ARITHMETIC OPERATORS");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Basic arithmetic with integers
        int a = 15, b = 4;
        System.out.println("   Integer Operations (a=15, b=4):");
        System.out.println("   ‚îî‚îÄ Addition (a + b): " + (a + b));
        System.out.println("   ‚îî‚îÄ Subtraction (a - b): " + (a - b));
        System.out.println("   ‚îî‚îÄ Multiplication (a * b): " + (a * b));
        System.out.println("   ‚îî‚îÄ Division (a / b): " + (a / b));
        System.out.println("   ‚îî‚îÄ Modulus (a % b): " + (a % b));
        
        // Floating-point arithmetic
        double x = 10.5, y = 3.2;
        System.out.println();
        System.out.println("   Floating-Point Operations (x=10.5, y=3.2):");
        System.out.println("   ‚îî‚îÄ Addition (x + y): " + (x + y));
        System.out.println("   ‚îî‚îÄ Division (x / y): " + (x / y));
        System.out.println("   ‚îî‚îÄ Precise division result: " + String.format("%.4f", x / y));
        
        // String concatenation with + operator
        String firstName = "John";
        String lastName = "Doe";
        int age = 25;
        System.out.println();
        System.out.println("   String Concatenation:");
        System.out.println("   ‚îî‚îÄ Full name: " + firstName + " " + lastName);
        System.out.println("   ‚îî‚îÄ Age info: " + firstName + " is " + age + " years old");
        
        // Division edge cases
        System.out.println();
        System.out.println("   üìä Division Edge Cases:");
        System.out.println("   ‚îî‚îÄ Integer division: 7 / 3 = " + (7 / 3) + " (truncated)");
        System.out.println("   ‚îî‚îÄ Floating division: 7.0 / 3 = " + (7.0 / 3));
        System.out.println("   ‚îî‚îÄ Modulus with negatives: -7 % 3 = " + (-7 % 3));
        System.out.println();
    }
    
    /**
     * Demonstrate comparison and logical operators
     */
    private static void demonstrateComparisonOperators() {
        System.out.println("üî∏ COMPARISON AND LOGICAL OPERATORS");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        int score1 = 85, score2 = 92, score3 = 85;
        System.out.println("   Comparison Operations (score1=85, score2=92, score3=85):");
        System.out.println("   ‚îî‚îÄ score1 == score3: " + (score1 == score3));
        System.out.println("   ‚îî‚îÄ score1 != score2: " + (score1 != score2));
        System.out.println("   ‚îî‚îÄ score2 > score1: " + (score2 > score1));
        System.out.println("   ‚îî‚îÄ score1 >= score3: " + (score1 >= score3));
        System.out.println("   ‚îî‚îÄ score1 < score2: " + (score1 < score2));
        System.out.println("   ‚îî‚îÄ score2 <= 100: " + (score2 <= 100));
        System.out.println();
    }
    
    /**
     * Demonstrate logical operators and short-circuit evaluation
     */
    private static void demonstrateLogicalOperators() {
        System.out.println("üî∏ LOGICAL OPERATORS AND SHORT-CIRCUIT EVALUATION");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        boolean isStudent = true;
        boolean hasGoodGrades = true;
        boolean isFullTime = false;
        
        System.out.println("   Boolean Variables:");
        System.out.println("   ‚îî‚îÄ isStudent: " + isStudent);
        System.out.println("   ‚îî‚îÄ hasGoodGrades: " + hasGoodGrades);
        System.out.println("   ‚îî‚îÄ isFullTime: " + isFullTime);
        
        System.out.println();
        System.out.println("   Logical AND (&&) - Both must be true:");
        System.out.println("   ‚îî‚îÄ isStudent && hasGoodGrades: " + (isStudent && hasGoodGrades));
        System.out.println("   ‚îî‚îÄ isStudent && isFullTime: " + (isStudent && isFullTime));
        
        System.out.println();
        System.out.println("   Logical OR (||) - At least one must be true:");
        System.out.println("   ‚îî‚îÄ hasGoodGrades || isFullTime: " + (hasGoodGrades || isFullTime));
        System.out.println("   ‚îî‚îÄ !isStudent || hasGoodGrades: " + (!isStudent || hasGoodGrades));
        
        System.out.println();
        System.out.println("   Logical NOT (!) - Inverts boolean value:");
        System.out.println("   ‚îî‚îÄ !isFullTime: " + (!isFullTime));
        System.out.println("   ‚îî‚îÄ !(isStudent && hasGoodGrades): " + (!(isStudent && hasGoodGrades)));
        
        // Short-circuit evaluation demonstration
        System.out.println();
        System.out.println("   ‚ö° Short-Circuit Evaluation:");
        System.out.println("   ‚îî‚îÄ false && (expensive operation): Short-circuits, doesn't evaluate right side");
        System.out.println("   ‚îî‚îÄ true || (expensive operation): Short-circuits, doesn't evaluate right side");
        System.out.println();
    }
    
    /**
     * Demonstrate assignment operators
     */
    private static void demonstrateAssignmentOperators() {
        System.out.println("üî∏ ASSIGNMENT OPERATORS");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        int value = 10;
        System.out.println("   Initial value: " + value);
        
        value += 5;  // equivalent to: value = value + 5
        System.out.println("   After += 5: " + value);
        
        value -= 3;  // equivalent to: value = value - 3
        System.out.println("   After -= 3: " + value);
        
        value *= 2;  // equivalent to: value = value * 2
        System.out.println("   After *= 2: " + value);
        
        value /= 4;  // equivalent to: value = value / 4
        System.out.println("   After /= 4: " + value);
        
        value %= 5;  // equivalent to: value = value % 5
        System.out.println("   After %= 5: " + value);
        
        // String concatenation assignment
        String message = "Hello";
        message += " World";  // equivalent to: message = message + " World"
        message += "!";
        System.out.println();
        System.out.println("   String concatenation assignment:");
        System.out.println("   ‚îî‚îÄ Final message: " + message);
        System.out.println();
    }
    
    /**
     * Demonstrate unary operators including pre/post increment
     */
    private static void demonstrateUnaryOperators() {
        System.out.println("üî∏ UNARY OPERATORS (PREFIX vs POSTFIX)");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Prefix increment/decrement
        int a = 5;
        System.out.println("   Prefix Operations (a initially = 5):");
        System.out.println("   ‚îî‚îÄ ++a (pre-increment): " + (++a) + ", a is now: " + a);
        System.out.println("   ‚îî‚îÄ --a (pre-decrement): " + (--a) + ", a is now: " + a);
        
        // Postfix increment/decrement
        int b = 5;
        System.out.println();
        System.out.println("   Postfix Operations (b initially = 5):");
        System.out.println("   ‚îî‚îÄ b++ (post-increment): " + (b++) + ", b is now: " + b);
        System.out.println("   ‚îî‚îÄ b-- (post-decrement): " + (b--) + ", b is now: " + b);
        
        // Practical example showing the difference
        System.out.println();
        System.out.println("   üìù Practical Example - Loop Counters:");
        System.out.print("   ‚îî‚îÄ Using i++: ");
        for (int i = 0; i < 5; i++) {
            System.out.print(i + " ");
        }
        System.out.println();
        
        // Unary plus and minus
        int positive = 42;
        int negative = -positive;  // Unary minus
        int alsoPositive = +positive;  // Unary plus (rarely used)
        
        System.out.println();
        System.out.println("   Unary Plus/Minus:");
        System.out.println("   ‚îî‚îÄ +42: " + alsoPositive);
        System.out.println("   ‚îî‚îÄ -42: " + negative);
        System.out.println();
    }
    
    /**
     * Demonstrate bitwise operators with practical examples
     */
    private static void demonstrateBitwiseOperators() {
        System.out.println("üî∏ BITWISE OPERATORS");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        int num1 = 12;  // Binary: 1100
        int num2 = 10;  // Binary: 1010
        
        System.out.println("   Working with: num1=12 (1100), num2=10 (1010)");
        System.out.println();
        
        System.out.println("   Bitwise Operations:");
        System.out.println("   ‚îî‚îÄ num1 & num2 (AND): " + (num1 & num2) + " (binary: " + Integer.toBinaryString(num1 & num2) + ")");
        System.out.println("   ‚îî‚îÄ num1 | num2 (OR):  " + (num1 | num2) + " (binary: " + Integer.toBinaryString(num1 | num2) + ")");
        System.out.println("   ‚îî‚îÄ num1 ^ num2 (XOR): " + (num1 ^ num2) + " (binary: " + Integer.toBinaryString(num1 ^ num2) + ")");
        System.out.println("   ‚îî‚îÄ ~num1 (NOT): " + (~num1) + " (complement)");
        
        System.out.println();
        System.out.println("   Shift Operations:");
        System.out.println("   ‚îî‚îÄ num1 << 2 (left shift): " + (num1 << 2) + " (multiply by 4)");
        System.out.println("   ‚îî‚îÄ num1 >> 2 (right shift): " + (num1 >> 2) + " (divide by 4)");
        
        // Practical application: checking even/odd
        System.out.println();
        System.out.println("   üîç Practical Application - Even/Odd Check:");
        for (int i = 1; i <= 6; i++) {
            boolean isEven = (i & 1) == 0;  // Check last bit
            System.out.println("   ‚îî‚îÄ " + i + " is " + (isEven ? "even" : "odd"));
        }
        System.out.println();
    }
    
    /**
     * Demonstrate operator precedence with complex expressions
     */
    private static void demonstrateOperatorPrecedence() {
        System.out.println("üî∏ OPERATOR PRECEDENCE AND COMPLEX EXPRESSIONS");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        int a = 2, b = 3, c = 4, d = 5;
        
        System.out.println("   Variables: a=2, b=3, c=4, d=5");
        System.out.println();
        
        // Expression evaluation examples
        int result1 = a + b * c;  // 2 + (3 * 4) = 14
        int result2 = (a + b) * c;  // (2 + 3) * 4 = 20
        int result3 = a + b * c - d;  // 2 + (3 * 4) - 5 = 9
        boolean result4 = a < b && c > d;  // (2 < 3) && (4 > 5) = true && false = false
        
        System.out.println("   Expression Evaluation:");
        System.out.println("   ‚îî‚îÄ a + b * c = " + result1 + " (multiplication first)");
        System.out.println("   ‚îî‚îÄ (a + b) * c = " + result2 + " (parentheses override precedence)");
        System.out.println("   ‚îî‚îÄ a + b * c - d = " + result3 + " (left-to-right for same precedence)");
        System.out.println("   ‚îî‚îÄ a < b && c > d = " + result4 + " (comparison then logical)");
        
        // Complex assignment chain
        int x = 10, y = 20, z = 30;
        x = y = z;  // Right-to-left associativity
        System.out.println();
        System.out.println("   Assignment Associativity:");
        System.out.println("   ‚îî‚îÄ x = y = z results in: x=" + x + ", y=" + y + ", z=" + z);
        
        // Mixed increment operations
        int counter = 5;
        int result5 = ++counter + counter++;  // 6 + 6, counter becomes 7
        System.out.println();
        System.out.println("   Mixed Increment Operations:");
        System.out.println("   ‚îî‚îÄ ++counter + counter++ = " + result5 + ", final counter = " + counter);
        System.out.println();
    }
    
    /**
     * Show practical applications of operators in real-world scenarios
     */
    private static void demonstratePracticalApplications() {
        System.out.println("üî∏ PRACTICAL APPLICATIONS");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Grade calculator
        System.out.println("   üéì Grade Calculator:");
        double midtermScore = 85.5;
        double finalScore = 92.0;
        double homeworkAverage = 88.5;
        
        double finalGrade = (midtermScore * 0.3) + (finalScore * 0.4) + (homeworkAverage * 0.3);
        char letterGrade = finalGrade >= 90 ? 'A' : finalGrade >= 80 ? 'B' : finalGrade >= 70 ? 'C' : 'F';
        
        System.out.println("   ‚îî‚îÄ Midterm (30%): " + midtermScore);
        System.out.println("   ‚îî‚îÄ Final (40%): " + finalScore);
        System.out.println("   ‚îî‚îÄ Homework (30%): " + homeworkAverage);
        System.out.println("   ‚îî‚îÄ Final Grade: " + String.format("%.2f", finalGrade) + " (" + letterGrade + ")");
        
        // Temperature converter
        System.out.println();
        System.out.println("   üå°Ô∏è Temperature Converter:");
        double celsius = 25.0;
        double fahrenheit = (celsius * 9.0 / 5.0) + 32.0;
        double kelvin = celsius + 273.15;
        
        System.out.println("   ‚îî‚îÄ " + celsius + "¬∞C = " + String.format("%.1f", fahrenheit) + "¬∞F");
        System.out.println("   ‚îî‚îÄ " + celsius + "¬∞C = " + String.format("%.2f", kelvin) + "K");
        
        // Banking calculations
        System.out.println();
        System.out.println("   üí∞ Banking Calculations:");
        double principal = 1000.0;
        double interestRate = 0.05;  // 5%
        int years = 3;
        
        double simpleInterest = principal * interestRate * years;
        double compoundInterest = principal * Math.pow(1 + interestRate, years) - principal;
        
        System.out.println("   ‚îî‚îÄ Principal: $" + String.format("%.2f", principal));
        System.out.println("   ‚îî‚îÄ Simple Interest (3 years): $" + String.format("%.2f", simpleInterest));
        System.out.println("   ‚îî‚îÄ Compound Interest (3 years): $" + String.format("%.2f", compoundInterest));
        
        // Validation using logical operators
        System.out.println();
        System.out.println("   ‚úÖ Input Validation Examples:");
        int age = 20;
        double gpa = 3.7;
        boolean hasValidAge = age >= 18 && age <= 65;
        boolean hasValidGPA = gpa >= 0.0 && gpa <= 4.0;
        boolean isEligible = hasValidAge && hasValidGPA;
        
        System.out.println("   ‚îî‚îÄ Age " + age + " is valid: " + hasValidAge);
        System.out.println("   ‚îî‚îÄ GPA " + gpa + " is valid: " + hasValidGPA);
        System.out.println("   ‚îî‚îÄ Student is eligible: " + isEligible);
        System.out.println();
    }
    
    /**
     * Display program footer with summary
     */
    private static void printProgramFooter() {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë                üéâ OPERATORS DEMONSTRATION COMPLETE! üéâ      ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  You've mastered Java operators:                            ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  ‚úÖ Arithmetic operators and their precedence               ‚ïë");
        System.out.println("‚ïë  ‚úÖ Comparison operators for decision making                ‚ïë");
        System.out.println("‚ïë  ‚úÖ Logical operators and short-circuit evaluation         ‚ïë");
        System.out.println("‚ïë  ‚úÖ Assignment operators and compound assignments           ‚ïë");
        System.out.println("‚ïë  ‚úÖ Unary operators including increment/decrement           ‚ïë");
        System.out.println("‚ïë  ‚úÖ Bitwise operations for advanced programming             ‚ïë");
        System.out.println("‚ïë  ‚úÖ Real-world applications and best practices              ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  Next: Learn control structures and decision making!        ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
    }
}

/*
 * EXPECTED PROGRAM OUTPUT (ABBREVIATED):
 * 
 * ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 * ‚ïë               üßÆ JAVA OPERATORS COMPREHENSIVE DEMO          ‚ïë
 * ‚ïë                   All Operators in Action                   ‚ïë
 * ‚ïë  This program demonstrates:                                  ‚ïë
 * ‚ïë  ‚Ä¢ Arithmetic, comparison, and logical operators            ‚ïë
 * ‚ïë  ‚Ä¢ Assignment and unary operators                           ‚ïë
 * ‚ïë  ‚Ä¢ Bitwise operations and practical applications            ‚ïë
 * ‚ïë  ‚Ä¢ Operator precedence and expression evaluation           ‚ïë
 * ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 * 
 * üî∏ ARITHMETIC OPERATORS
 *    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 *    Integer Operations (a=15, b=4):
 *    ‚îî‚îÄ Addition (a + b): 19
 *    ‚îî‚îÄ Subtraction (a - b): 11
 *    ‚îî‚îÄ Multiplication (a * b): 60
 *    ‚îî‚îÄ Division (a / b): 3
 *    ‚îî‚îÄ Modulus (a % b): 3
 * 
 *    Floating-Point Operations (x=10.5, y=3.2):
 *    ‚îî‚îÄ Addition (x + y): 13.7
 *    ‚îî‚îÄ Division (x / y): 3.28125
 *    ‚îî‚îÄ Precise division result: 3.2812
 * 
 * ... (additional sections showing all operator demonstrations)
 */`,
      exercise: `
        **üßÆ Operators Mastery Challenge**
        
        This comprehensive exercise will test and reinforce your understanding of all Java operators through practical programming challenges and real-world applications.
        
        **Part 1: Arithmetic Operations Workshop (35 minutes)**
        
        1. **Basic Calculator (15 minutes):**
           Create a program called \`BasicCalculator.java\` that:
           - Performs all arithmetic operations on two given numbers
           - Shows both integer and floating-point division results
           - Demonstrates the modulus operator with practical examples
           - Handles edge cases like division by zero (display appropriate messages)
           - Uses meaningful variable names and proper formatting
        
        2. **Mathematical Applications (20 minutes):**
           Create programs that calculate:
           - Area and perimeter of rectangles, circles, and triangles
           - Compound interest for different time periods and rates
           - Distance between two points using the distance formula
           - Body Mass Index (BMI) calculator with health category classification
           - Temperature conversion between Celsius, Fahrenheit, and Kelvin
        
        **Part 2: Comparison and Logic Challenge (30 minutes)**
        
        1. **Student Eligibility System (15 minutes):**
           Create a program that determines student eligibility for various programs:
           - Scholarship eligibility (GPA >= 3.5 AND age < 25)
           - Graduate school admission (GPA >= 3.0 OR high test scores)
           - Honor roll status (GPA >= 3.8 AND no failing grades)
           - Use logical operators to combine multiple conditions
           - Test with different student data sets
        
        2. **Range Validation Program (15 minutes):**
           Create a comprehensive validation system that checks:
           - Age ranges for different categories (child, teen, adult, senior)
           - Grade validation (0-100 range)
           - Password strength (length >= 8 AND contains numbers AND contains letters)
           - Date validation (month 1-12, day 1-31, year reasonable range)
        
        **Part 3: Increment/Decrement Exploration (25 minutes)**
        
        1. **Pre vs Post Increment Analysis (10 minutes):**
           Create a program that clearly demonstrates the difference between:
           - \`++x\` vs \`x++\` in various expressions
           - How they behave in loops and assignments
           - Create examples where the choice matters
           - Document when to use each type
        
        2. **Loop Counter Patterns (15 minutes):**
           Implement different counting patterns using various operators:
           - Count up by 1, 2, 5, and 10
           - Count down from 100 to 0 by different increments
           - Use compound assignment operators (\`+=\`, \`-=\`, \`*=\`)
           - Create a program that generates various number sequences
        
        **Part 4: Advanced Operator Applications (40 minutes)**
        
        1. **Bitwise Operations Practice (20 minutes):**
           Create a program that:
           - Converts decimal numbers to binary representation
           - Demonstrates all bitwise operators with visual output
           - Implements even/odd checking using bitwise AND
           - Shows how bit shifting can multiply/divide by powers of 2
           - Creates simple bit manipulation utilities
        
        2. **Complex Expression Evaluator (20 minutes):**
           Build a program that evaluates complex mathematical expressions:
           - Implement order of operations with parentheses
           - Create a simple expression parser for basic operations
           - Handle operator precedence correctly
           - Show step-by-step evaluation of complex expressions
           - Include validation for proper syntax
        
        **Part 5: Real-World Problem Solving (30 minutes)**
        
        Choose TWO of the following real-world challenges:
        
        **Option A: E-commerce Price Calculator**
        - Calculate total price with tax, discounts, and shipping
        - Apply percentage discounts and fixed amount coupons
        - Calculate different tax rates based on location
        - Handle bulk pricing (buy 3, get 1 free)
        - Show itemized breakdown of all charges
        
        **Option B: Time and Date Calculator**
        - Calculate differences between dates in days/hours/minutes
        - Determine if a given year is a leap year
        - Calculate age in years, months, and days
        - Convert between 12-hour and 24-hour time formats
        - Handle time zone conversions
        
        **Option C: Gaming Score System**
        - Calculate player scores with multipliers and bonuses
        - Implement level-up logic based on experience points
        - Create a ranking system based on multiple criteria
        - Calculate statistics like accuracy percentage
        - Handle high score tracking and leaderboards
        
        **Option D: Scientific Calculator**
        - Implement advanced mathematical operations
        - Calculate powers, square roots, and logarithms
        - Convert between different number bases (binary, hex, decimal)
        - Handle scientific notation and significant figures
        - Create statistical calculations (mean, median, standard deviation)
        
        **üìã Deliverables:**
        
        Submit well-documented Java programs:
        1. \`BasicCalculator.java\` - Comprehensive arithmetic operations
        2. \`StudentEligibility.java\` - Logic and comparison operators
        3. \`IncrementDemo.java\` - Pre/post increment exploration
        4. \`BitwiseOperations.java\` - Bitwise operator demonstrations
        5. Two real-world application programs from Part 5
        6. \`OperatorTest.java\` - Test program showing complex expressions
        7. Documentation explaining your findings and operator precedence rules
        
        **üéØ Success Criteria:**
        
        Your programs should demonstrate:
        - ‚úÖ Correct usage of all operator types with appropriate examples
        - ‚úÖ Understanding of operator precedence and associativity
        - ‚úÖ Proper handling of different data types in operations
        - ‚úÖ Real-world applications showing practical operator usage
        - ‚úÖ Clear understanding of pre/post increment differences
        - ‚úÖ Effective use of logical operators for validation and decision making
        - ‚úÖ Professional code organization with proper documentation
        
        **üí° Advanced Challenges:**
        
        1. **Performance Analysis:** Compare the performance of different operators
        2. **Expression Parser:** Build a simple calculator that can parse and evaluate string expressions
        3. **Bitwise Flags:** Implement a permission system using bitwise operations
        4. **Operator Overloading Research:** Research how other languages handle operator overloading
        5. **Assembly Exploration:** Research how operators translate to machine code
        
        **üìö Key Learning Outcomes:**
        
        After completing this exercise, you'll understand:
        - How to choose the right operators for different scenarios
        - The importance of operator precedence in complex expressions
        - When and why to use compound assignment operators
        - How bitwise operators can solve specific programming problems
        - The difference between logical and bitwise operators
        - Best practices for writing clear, maintainable expressions
        - Real-world applications of mathematical and logical operations
        
        This solid foundation in operators will be essential as you move into control structures, where operators form the backbone of conditional statements and loop controls!
      `
    }
  },

  'lesson-1-5': {
    title: 'Operators in Java',
    type: 'lesson',
    duration: '35 min',
    module: 'Java Fundamentals',
    content: {
      overview: 'Master all types of operators in Java including arithmetic, comparison, logical, and assignment operators. This comprehensive lesson explores operator precedence, associativity, and practical applications in real-world programming scenarios. You\'ll understand how operators work at the bit level and learn advanced techniques for efficient computation.',
      objectives: [
        'Master all arithmetic operators: +, -, *, /, % and understand their behavior with different data types',
        'Learn comparison operators and their proper usage with primitives and objects',
        'Understand logical operators: &&, ||, ! and short-circuit evaluation',
        'Master assignment operators and compound assignment shortcuts',
        'Learn unary operators: ++, --, +, - and understand pre/post increment differences',
        'Understand operator precedence and associativity rules for complex expressions',
        'Explore bitwise operators and their applications in system programming'
      ],
      theory: `
        <div class="bg-gradient-to-r from-orange-600 to-red-600 text-white p-6 rounded-lg mb-8 shadow-2xl">
          <h1 class="text-3xl font-bold m-0 flex items-center">
            <span class="w-3 h-10 bg-white rounded mr-4"></span>
            Operators in Java
          </h1>
          <p class="mt-3 text-orange-100 text-lg">The building blocks of computation - performing operations on data</p>
        </div>

        <div class="space-y-8">
          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-orange-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-orange-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">1</span>
              Arithmetic Operators
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed text-lg">
                Arithmetic operators perform mathematical calculations on numeric data types. Java provides five basic 
                arithmetic operators, each with specific behavior for different data types and edge cases.
              </p>
              <div class="overflow-x-auto">
                <table class="w-full text-sm border border-gray-200 rounded-lg">
                  <thead class="bg-orange-50">
                    <tr>
                      <th class="text-left p-3 font-bold text-orange-800">Operator</th>
                      <th class="text-left p-3 font-bold text-orange-800">Name</th>
                      <th class="text-left p-3 font-bold text-orange-800">Example</th>
                      <th class="text-left p-3 font-bold text-orange-800">Result</th>
                      <th class="text-left p-3 font-bold text-orange-800">Notes</th>
                    </tr>
                  </thead>
                  <tbody class="divide-y divide-gray-200">
                    <tr>
                      <td class="p-3 font-mono text-blue-600">+</td>
                      <td class="p-3">Addition</td>
                      <td class="p-3 font-mono">5 + 3</td>
                      <td class="p-3 font-mono">8</td>
                      <td class="p-3">Also used for string concatenation</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-mono text-blue-600">-</td>
                      <td class="p-3">Subtraction</td>
                      <td class="p-3 font-mono">5 - 3</td>
                      <td class="p-3 font-mono">2</td>
                      <td class="p-3">Can be unary (negative sign)</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-mono text-blue-600">*</td>
                      <td class="p-3">Multiplication</td>
                      <td class="p-3 font-mono">5 * 3</td>
                      <td class="p-3 font-mono">15</td>
                      <td class="p-3">Watch for overflow with large numbers</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-mono text-blue-600">/</td>
                      <td class="p-3">Division</td>
                      <td class="p-3 font-mono">7 / 3</td>
                      <td class="p-3 font-mono">2</td>
                      <td class="p-3">Integer division truncates decimal</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-mono text-blue-600">%</td>
                      <td class="p-3">Modulus</td>
                      <td class="p-3 font-mono">7 % 3</td>
                      <td class="p-3 font-mono">1</td>
                      <td class="p-3">Remainder after division</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-blue-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">2</span>
              Comparison and Logical Operators
            </h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div class="bg-blue-50 p-4 rounded-lg">
                <h4 class="font-bold text-blue-800 mb-3">üîç Comparison Operators</h4>
                <div class="space-y-2">
                  <div class="bg-white p-2 rounded border font-mono text-sm space-y-1">
                    <div><span class="text-blue-600">==</span> equal to</div>
                    <div><span class="text-blue-600">!=</span> not equal to</div>
                    <div><span class="text-blue-600">&gt;</span> greater than</div>
                    <div><span class="text-blue-600">&lt;</span> less than</div>
                    <div><span class="text-blue-600">&gt;=</span> greater than or equal</div>
                    <div><span class="text-blue-600">&lt;=</span> less than or equal</div>
                  </div>
                </div>
              </div>
              <div class="bg-green-50 p-4 rounded-lg">
                <h4 class="font-bold text-green-800 mb-3">üß† Logical Operators</h4>
                <div class="space-y-2">
                  <div class="bg-white p-2 rounded border font-mono text-sm space-y-1">
                    <div><span class="text-green-600">&&</span> logical AND</div>
                    <div><span class="text-green-600">||</span> logical OR</div>
                    <div><span class="text-green-600">!</span> logical NOT</div>
                    <div><span class="text-green-600">&</span> bitwise AND</div>
                    <div><span class="text-green-600">|</span> bitwise OR</div>
                    <div><span class="text-green-600">^</span> bitwise XOR</div>
                  </div>
                </div>
              </div>
            </div>
            <div class="bg-yellow-50 p-4 rounded-lg border border-yellow-200 mt-4">
              <h4 class="font-bold text-yellow-800 mb-2">‚ö° Short-Circuit Evaluation</h4>
              <p class="text-yellow-700 text-sm">Logical operators <code>&&</code> and <code>||</code> use short-circuit evaluation: if the result can be determined from the left operand, the right operand is not evaluated. This is crucial for performance and avoiding errors.</p>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-purple-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-purple-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">3</span>
              Assignment and Unary Operators
            </h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div class="bg-purple-50 p-4 rounded-lg">
                <h4 class="font-bold text-purple-800 mb-3">üìù Assignment Operators</h4>
                <div class="space-y-2">
                  <div class="bg-white p-2 rounded border font-mono text-sm space-y-1">
                    <div><span class="text-purple-600">=</span> simple assignment</div>
                    <div><span class="text-purple-600">+=</span> add and assign</div>
                    <div><span class="text-purple-600">-=</span> subtract and assign</div>
                    <div><span class="text-purple-600">*=</span> multiply and assign</div>
                    <div><span class="text-purple-600">/=</span> divide and assign</div>
                    <div><span class="text-purple-600">%=</span> modulus and assign</div>
                  </div>
                </div>
              </div>
              <div class="bg-red-50 p-4 rounded-lg">
                <h4 class="font-bold text-red-800 mb-3">üîÑ Unary Operators</h4>
                <div class="space-y-2">
                  <div class="bg-white p-2 rounded border font-mono text-sm space-y-1">
                    <div><span class="text-red-600">++</span> increment by 1</div>
                    <div><span class="text-red-600">--</span> decrement by 1</div>
                    <div><span class="text-red-600">+</span> unary plus</div>
                    <div><span class="text-red-600">-</span> unary minus</div>
                    <div><span class="text-red-600">!</span> logical complement</div>
                    <div><span class="text-red-600">~</span> bitwise complement</div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-indigo-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-indigo-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">4</span>
              Operator Precedence and Associativity
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed">Understanding operator precedence is crucial for writing correct expressions. When multiple operators appear in an expression, Java follows specific rules to determine evaluation order.</p>
              <div class="overflow-x-auto">
                <table class="w-full text-sm border border-gray-200 rounded-lg">
                  <thead class="bg-indigo-50">
                    <tr>
                      <th class="text-left p-3 font-bold text-indigo-800">Precedence</th>
                      <th class="text-left p-3 font-bold text-indigo-800">Operators</th>
                      <th class="text-left p-3 font-bold text-indigo-800">Associativity</th>
                      <th class="text-left p-3 font-bold text-indigo-800">Example</th>
                    </tr>
                  </thead>
                  <tbody class="divide-y divide-gray-200">
                    <tr>
                      <td class="p-3 font-bold">1 (Highest)</td>
                      <td class="p-3 font-mono">++ -- + - ! ~</td>
                      <td class="p-3">Right to Left</td>
                      <td class="p-3 font-mono">++x, -y</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-bold">2</td>
                      <td class="p-3 font-mono">* / %</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a * b / c</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-bold">3</td>
                      <td class="p-3 font-mono">+ -</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a + b - c</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-bold">4</td>
                      <td class="p-3 font-mono">&lt; &lt;= &gt; &gt;=</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a &lt; b &lt;= c</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-bold">5</td>
                      <td class="p-3 font-mono">== !=</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a == b != c</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-bold">6</td>
                      <td class="p-3 font-mono">&&</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a && b && c</td>
                    </tr>
                    <tr>
                      <td class="p-3 font-bold">7</td>
                      <td class="p-3 font-mono">||</td>
                      <td class="p-3">Left to Right</td>
                      <td class="p-3 font-mono">a || b || c</td>
                    </tr>
                    <tr class="bg-gray-50">
                      <td class="p-3 font-bold">8 (Lowest)</td>
                      <td class="p-3 font-mono">= += -= *= /= %=</td>
                      <td class="p-3">Right to Left</td>
                      <td class="p-3 font-mono">a = b += c</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-green-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-green-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">5</span>
              Increment and Decrement Operators
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed">The increment (++) and decrement (--) operators are unique because they can be used in prefix or postfix position, with different behavior for each.</p>
              <div class="grid md:grid-cols-2 gap-6">
                <div class="bg-green-50 p-4 rounded-lg">
                  <h4 class="font-bold text-green-800 mb-3">üìà Prefix (++x, --x)</h4>
                  <div class="bg-white p-3 rounded border space-y-2">
                    <div class="font-mono text-sm">int x = 5;</div>
                    <div class="font-mono text-sm">int y = ++x; // x becomes 6, y gets 6</div>
                    <div class="text-xs text-green-600">Increment first, then use value</div>
                  </div>
                </div>
                <div class="bg-blue-50 p-4 rounded-lg">
                  <h4 class="font-bold text-blue-800 mb-3">üìâ Postfix (x++, x--)</h4>
                  <div class="bg-white p-3 rounded border space-y-2">
                    <div class="font-mono text-sm">int x = 5;</div>
                    <div class="font-mono text-sm">int y = x++; // y gets 5, x becomes 6</div>
                    <div class="text-xs text-blue-600">Use current value, then increment</div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-red-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">6</span>
              Bitwise Operators
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed">Bitwise operators work on individual bits of integer values. These are powerful tools for system programming, optimization, and working with flags.</p>
              <div class="grid md:grid-cols-2 gap-6">
                <div class="space-y-3">
                  <div class="bg-red-50 p-3 rounded-lg">
                    <h5 class="font-bold text-red-800 text-sm">Basic Bitwise Operations</h5>
                    <div class="bg-white p-2 rounded border font-mono text-xs space-y-1">
                      <div><span class="text-red-600">&</span> AND: 1101 & 1011 = 1001</div>
                      <div><span class="text-red-600">|</span> OR:  1101 | 1011 = 1111</div>
                      <div><span class="text-red-600">^</span> XOR: 1101 ^ 1011 = 0110</div>
                      <div><span class="text-red-600">~</span> NOT: ~1101 = 0010</div>
                    </div>
                  </div>
                </div>
                <div class="space-y-3">
                  <div class="bg-orange-50 p-3 rounded-lg">
                    <h5 class="font-bold text-orange-800 text-sm">Shift Operations</h5>
                    <div class="bg-white p-2 rounded border font-mono text-xs space-y-1">
                      <div><span class="text-orange-600">&lt;&lt;</span> Left shift: x &lt;&lt; 2 (multiply by 4)</div>
                      <div><span class="text-orange-600">&gt;&gt;</span> Right shift: x &gt;&gt; 2 (divide by 4)</div>
                      <div><span class="text-orange-600">&gt;&gt;&gt;</span> Unsigned right shift</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-gradient-to-r from-gray-100 to-gray-200 p-6 rounded-lg">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">üí° Professional Usage Tips</h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div>
                <h4 class="font-bold text-gray-800 mb-3">‚úÖ Best Practices</h4>
                <ul class="space-y-2 text-gray-700">
                  <li>‚Ä¢ Use parentheses to clarify complex expressions</li>
                  <li>‚Ä¢ Prefer compound assignment operators (+=, -=) for readability</li>
                  <li>‚Ä¢ Use logical && and || for boolean conditions</li>
                  <li>‚Ä¢ Be careful with floating-point equality comparisons</li>
                  <li>‚Ä¢ Use meaningful variable names in expressions</li>
                </ul>
              </div>
              <div>
                <h4 class="font-bold text-gray-800 mb-3">üö´ Common Pitfalls</h4>
                <ul class="space-y-2 text-gray-700">
                  <li>‚Ä¢ Confusing = (assignment) with == (comparison)</li>
                  <li>‚Ä¢ Integer division truncation: 5/2 = 2, not 2.5</li>
                  <li>‚Ä¢ Mixing pre/post increment in complex expressions</li>
                  <li>‚Ä¢ Division by zero causing runtime exceptions</li>
                  <li>‚Ä¢ Forgetting operator precedence in complex expressions</li>
                </ul>
              </div>
            </div>
          </section>
        </div>
      `,
      codeExample: `/**
 * OperatorsComprehensive.java
 * 
 * This comprehensive program demonstrates all Java operators and their
 * practical applications in real-world programming scenarios. It covers:
 * - All arithmetic operations with different data types
 * - Comparison operators with primitives and objects
 * - Logical operators and short-circuit evaluation
 * - Assignment operators and compound assignments
 * - Unary operators including pre/post increment
 * - Bitwise operations and practical applications
 * - Operator precedence and expression evaluation
 * 
 * Each section includes detailed examples and explanations of behavior,
 * edge cases, and best practices for professional development.
 */

public class OperatorsComprehensive {
    
    public static void main(String[] args) {
        printProgramHeader();
        demonstrateArithmeticOperators();
        demonstrateComparisonOperators();
        demonstrateLogicalOperators();
        demonstrateAssignmentOperators();
        demonstrateUnaryOperators();
        demonstrateBitwiseOperators();
        demonstrateOperatorPrecedence();
        demonstratePracticalApplications();
        printProgramFooter();
    }
    
    /**
     * Display program header with title and overview
     */
    private static void printProgramHeader() {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë               üßÆ JAVA OPERATORS COMPREHENSIVE DEMO          ‚ïë");
        System.out.println("‚ïë                   All Operators in Action                   ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  This program demonstrates:                                  ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Arithmetic, comparison, and logical operators            ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Assignment and unary operators                           ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Bitwise operations and practical applications            ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Operator precedence and expression evaluation           ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println();
    }
    
    /**
     * Demonstrate all arithmetic operators with different data types
     */
    private static void demonstrateArithmeticOperators() {
        System.out.println("üî∏ ARITHMETIC OPERATORS");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Basic arithmetic with integers
        int a = 15, b = 4;
        System.out.println("   Integer Operations (a=15, b=4):");
        System.out.println("   ‚îî‚îÄ Addition (a + b): " + (a + b));
        System.out.println("   ‚îî‚îÄ Subtraction (a - b): " + (a - b));
        System.out.println("   ‚îî‚îÄ Multiplication (a * b): " + (a * b));
        System.out.println("   ‚îî‚îÄ Division (a / b): " + (a / b));
        System.out.println("   ‚îî‚îÄ Modulus (a % b): " + (a % b));
        
        // Floating-point arithmetic
        double x = 10.5, y = 3.2;
        System.out.println();
        System.out.println("   Floating-Point Operations (x=10.5, y=3.2):");
        System.out.println("   ‚îî‚îÄ Addition (x + y): " + (x + y));
        System.out.println("   ‚îî‚îÄ Division (x / y): " + (x / y));
        System.out.println("   ‚îî‚îÄ Precise division result: " + String.format("%.4f", x / y));
        
        // String concatenation with + operator
        String firstName = "John";
        String lastName = "Doe";
        int age = 25;
        System.out.println();
        System.out.println("   String Concatenation:");
        System.out.println("   ‚îî‚îÄ Full name: " + firstName + " " + lastName);
        System.out.println("   ‚îî‚îÄ Age info: " + firstName + " is " + age + " years old");
        
        // Division edge cases
        System.out.println();
        System.out.println("   üìä Division Edge Cases:");
        System.out.println("   ‚îî‚îÄ Integer division: 7 / 3 = " + (7 / 3) + " (truncated)");
        System.out.println("   ‚îî‚îÄ Floating division: 7.0 / 3 = " + (7.0 / 3));
        System.out.println("   ‚îî‚îÄ Modulus with negatives: -7 % 3 = " + (-7 % 3));
        System.out.println();
    }
    
    /**
     * Demonstrate comparison and logical operators
     */
    private static void demonstrateComparisonOperators() {
        System.out.println("üî∏ COMPARISON AND LOGICAL OPERATORS");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        int score1 = 85, score2 = 92, score3 = 85;
        System.out.println("   Comparison Operations (score1=85, score2=92, score3=85):");
        System.out.println("   ‚îî‚îÄ score1 == score3: " + (score1 == score3));
        System.out.println("   ‚îî‚îÄ score1 != score2: " + (score1 != score2));
        System.out.println("   ‚îî‚îÄ score2 > score1: " + (score2 > score1));
        System.out.println("   ‚îî‚îÄ score1 >= score3: " + (score1 >= score3));
        System.out.println("   ‚îî‚îÄ score1 < score2: " + (score1 < score2));
        System.out.println("   ‚îî‚îÄ score2 <= 100: " + (score2 <= 100));
        System.out.println();
    }
    
    /**
     * Demonstrate logical operators and short-circuit evaluation
     */
    private static void demonstrateLogicalOperators() {
        System.out.println("üî∏ LOGICAL OPERATORS AND SHORT-CIRCUIT EVALUATION");
        System.out.println("   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        boolean isStudent = true;
        boolean hasGoodGrades = true;
        boolean isFullTime = false;
        
        System.out.println("   Boolean Variables:");
        System.out.println("   ‚îî‚îÄ isStudent: " + isStudent);
        System.out.println("   ‚îî‚îÄ hasGoodGrades: " + hasGoodGrades);
        System.out.println("   ‚îî‚îÄ isFullTime: " + isFullTime);
        
        System.out.println();
        System.out.println("   Logical AND (&&) - Both must be true:");
        System.out.println("   ‚îî‚îÄ isStudent && hasGoodGrades: " + (isStudent && hasGoodGrades));
        System.out.println("   ‚îî‚îÄ isStudent && isFullTime: " + (isStudent
    title: 'Conditional Statements - if, else if, else',
    type: 'lesson',
    duration: '30 min',
    module: 'Control Structures',
    content: {
      overview: 'Learn to control program flow using conditional statements. Master if, else if, and else statements for decision making.',
      objectives: [
        'Understand conditional statement syntax and logic',
        'Learn to write complex conditional expressions',
        'Master nested if statements',
        'Practice real-world conditional scenarios'
      ],
      theory: '<div class="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Conditional Statements</h1></div><p class="text-gray-700 mb-4">Conditional statements allow your program to make decisions based on different conditions using if, else if, and else keywords.</p>',
      codeExample: 'public class ConditionalStatements {\n    public static void main(String[] args) {\n        int score = 85;\n        \n        if (score >= 90) {\n            System.out.println("Grade: A");\n        } else if (score >= 80) {\n            System.out.println("Grade: B");\n        } else if (score >= 70) {\n            System.out.println("Grade: C");\n        } else if (score >= 60) {\n            System.out.println("Grade: D");\n        } else {\n            System.out.println("Grade: F");\n        }\n        \n        // Multiple conditions\n        int age = 20;\n        boolean hasLicense = true;\n        \n        if (age >= 18 && hasLicense) {\n            System.out.println("Can drive a car");\n        } else {\n            System.out.println("Cannot drive a car");\n        }\n    }\n}',
      exercise: 'Create a program that determines if a year is a leap year. A leap year is divisible by 4, but not by 100, unless it is also divisible by 400.'
    }
  },

  'lesson-2-2': {
    title: 'Switch Statement',
    type: 'lesson',
    duration: '25 min',
    module: 'Control Structures',
    content: {
      overview: 'Learn to use switch statements for multiple condition checking. Understand when to use switch vs if-else statements.',
      objectives: [
        'Understand switch statement syntax',
        'Learn about case labels and break statements',
        'Master default case handling',
        'Compare switch vs if-else performance'
      ],
      theory: '<div class="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Switch Statement</h1></div><p class="text-gray-700 mb-4">Switch statements provide an efficient way to test a variable against multiple values, especially useful for menu systems and categorical data.</p>',
      codeExample: 'public class SwitchExample {\n    public static void main(String[] args) {\n        int dayOfWeek = 3;\n        \n        switch (dayOfWeek) {\n            case 1:\n                System.out.println("Monday");\n                break;\n            case 2:\n                System.out.println("Tuesday");\n                break;\n            case 3:\n                System.out.println("Wednesday");\n                break;\n            case 4:\n                System.out.println("Thursday");\n                break;\n            case 5:\n                System.out.println("Friday");\n                break;\n            default:\n                System.out.println("Weekend");\n        }\n    }\n}',
      exercise: 'Create a program that uses switch statement to convert numeric grades (1-5) to letter grades (A-F).'
    }
  },

  // Module 2: Control Structures  
  'lesson-2-1': {
    title: 'Conditional Statements - if, else if, else',
    type: 'lesson',
    duration: '30 min',
    module: 'Control Structures',
    content: {
      overview: 'Learn to control program flow using conditional statements. Master if, else if, and else statements for decision making.',
      objectives: [
        'Understand conditional statement syntax and logic',
        'Learn to write complex conditional expressions',
        'Master nested if statements',
        'Practice real-world conditional scenarios'
      ],
      theory: '<div class="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Conditional Statements</h1></div><p class="text-gray-700 mb-4">Conditional statements allow your program to make decisions based on different conditions using if, else if, and else keywords.</p>',
      codeExample: 'public class ConditionalStatements {\n    public static void main(String[] args) {\n        int score = 85;\n        \n        if (score >= 90) {\n            System.out.println("Grade: A");\n        } else if (score >= 80) {\n            System.out.println("Grade: B");\n        } else if (score >= 70) {\n            System.out.println("Grade: C");\n        } else if (score >= 60) {\n            System.out.println("Grade: D");\n        } else {\n            System.out.println("Grade: F");\n        }\n        \n        // Multiple conditions\n        int age = 20;\n        boolean hasLicense = true;\n        \n        if (age >= 18 && hasLicense) {\n            System.out.println("Can drive a car");\n        } else {\n            System.out.println("Cannot drive a car");\n        }\n    }\n}',
      exercise: 'Create a program that determines if a year is a leap year. A leap year is divisible by 4, but not by 100, unless it is also divisible by 400.'
    }
  },

  'lesson-2-2': {
    title: 'Switch Statement',
    type: 'lesson',
    duration: '25 min',
    module: 'Control Structures',
    content: {
      overview: 'Learn to use switch statements for multiple condition checking. Understand when to use switch vs if-else statements.',
      objectives: [
        'Understand switch statement syntax',
        'Learn about case labels and break statements',
        'Master default case handling',
        'Compare switch vs if-else performance'
      ],
      theory: '<div class="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Switch Statement</h1></div><p class="text-gray-700 mb-4">Switch statements provide an efficient way to test a variable against multiple values, especially useful for menu systems and categorical data.</p>',
      codeExample: 'public class SwitchExample {\n    public static void main(String[] args) {\n        int dayOfWeek = 3;\n        \n        switch (dayOfWeek) {\n            case 1:\n                System.out.println("Monday");\n                break;\n            case 2:\n                System.out.println("Tuesday");\n                break;\n            case 3:\n                System.out.println("Wednesday");\n                break;\n            case 4:\n                System.out.println("Thursday");\n                break;\n            case 5:\n                System.out.println("Friday");\n                break;\n            case 6:\n                System.out.println("Saturday");\n                break;\n            case 7:\n                System.out.println("Sunday");\n                break;\n            default:\n                System.out.println("Invalid day");\n        }\n    }\n}',
      exercise: 'Create a calculator program using switch statement that performs addition, subtraction, multiplication, and division based on user choice.'
    }
  },

  'lesson-2-3': {
    title: 'Loops - for, while, do-while',
    type: 'lesson',
    duration: '35 min',
    module: 'Control Structures',
    content: {
      overview: 'Master all types of loops in Java: for, while, and do-while loops. Learn when to use each type and how to control loop execution.',
      objectives: [
        'Understand for loop syntax and applications',
        'Learn while and do-while loop differences',
        'Master loop control with break and continue',
        'Practice nested loops and common patterns'
      ],
      theory: '<div class="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Loops in Java</h1></div><p class="text-gray-700 mb-4">Loops allow you to execute code repeatedly. Java provides for loops (when you know iterations), while loops (condition-based), and do-while loops (execute at least once).</p>',
      codeExample: 'public class Loops {\n    public static void main(String[] args) {\n        // For loop\n        System.out.println("For loop:");\n        for (int i = 1; i <= 5; i++) {\n            System.out.println("Count: " + i);\n        }\n        \n        // While loop\n        System.out.println("\\nWhile loop:");\n        int count = 1;\n        while (count <= 3) {\n            System.out.println("While count: " + count);\n            count++;\n        }\n        \n        // Do-while loop\n        System.out.println("\\nDo-while loop:");\n        int num = 1;\n        do {\n            System.out.println("Do-while: " + num);\n            num++;\n        } while (num <= 2);\n    }\n}',
      exercise: 'Create a program that prints the multiplication table of 5 using a for loop, and another program that finds the sum of numbers from 1 to 10 using a while loop.'
    }
  },

  'lesson-2-4': {
    title: 'Enhanced for Loop (for-each)',
    type: 'lesson',
    duration: '20 min',
    module: 'Control Structures',
    content: {
      overview: 'Learn the enhanced for loop (for-each) for iterating over collections and arrays in a more readable way.',
      objectives: [
        'Understand enhanced for loop syntax',
        'Learn when to use for-each vs traditional for loop',
        'Practice iterating over arrays and collections',
        'Understand limitations of enhanced for loop'
      ],
      theory: '<div class="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Enhanced for Loop</h1></div><p class="text-gray-700 mb-4">The enhanced for loop (for-each) provides a cleaner syntax for iterating over arrays and collections without worrying about indices.</p>',
      codeExample: 'public class EnhancedForLoop {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        for (int n : numbers) {\n            System.out.println(n);\n        }\n    }\n}',
      exercise: 'Create an array of 10 integers and print only the even numbers using the enhanced for loop.'
    }
  },

  'lesson-2-5': {
    title: 'Break and Continue',
    type: 'lesson',
    duration: '15 min',
    module: 'Control Structures',
    content: {
      overview: 'Learn how to control loop flow using break and continue, including labeled breaks for nested loops.',
      objectives: [
        'Understand break and continue semantics',
        'Use break to exit loops early',
        'Use continue to skip iterations',
        'Apply loop control in real scenarios'
      ],
      theory: '<div class="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Break and Continue</h1></div><p class="text-gray-700 mb-4">Break terminates the loop entirely, while continue skips the current iteration and moves to the next one. Both are essential for controlling loop execution flow.</p>',
      codeExample: 'public class BreakContinue {\n    public static void main(String[] args) {\n        // Break example\n        System.out.println("Break example:");\n        for (int i = 1; i <= 10; i++) {\n            if (i == 6) {\n                break; // Exit loop when i equals 6\n            }\n            System.out.println("i = " + i);\n        }\n        \n        // Continue example\n        System.out.println("\\nContinue example:");\n        for (int i = 1; i <= 10; i++) {\n            if (i % 2 == 0) {\n                continue; // Skip even numbers\n            }\n            System.out.println("Odd number: " + i);\n        }\n        \n        // Nested loops with labeled break\n        System.out.println("\\nNested loops with labeled break:");\n        outer: for (int i = 1; i <= 3; i++) {\n            for (int j = 1; j <= 3; j++) {\n                if (i == 2 && j == 2) {\n                    break outer; // Break out of both loops\n                }\n                System.out.println("i=" + i + ", j=" + j);\n            }\n        }\n    }\n}',
      exercise: 'Create a number guessing game where the user has to guess a number between 1-100. Use break to exit when correct, and continue to keep asking for invalid inputs.'
    }
  },

  // Module 3: Object-Oriented Programming (7 lessons)
  // 3-1 Introduction to OOP (lesson, 20 min)
  // 3-2 Classes and Objects (coding, 35 min)
  // 3-3 Constructors and Methods (coding, 40 min)
  // 3-4 Inheritance (lesson, 45 min)
  // 3-5 Polymorphism (lesson, 35 min)
  // 3-6 Encapsulation (lesson, 30 min)
  // 3-7 Abstract Classes and Interfaces (coding, 40 min)

  'lesson-3-1': {
    title: 'Introduction to OOP',
    type: 'lesson',
    duration: '30 min',
    module: 'Object-Oriented Programming',
    content: {
      overview: 'Embark on your journey into Object-Oriented Programming, the cornerstone of modern software development. This comprehensive introduction will transform your understanding of programming from simple procedural code to sophisticated, modular, and maintainable software systems. You\'ll discover why OOP has become the dominant programming paradigm for building everything from mobile apps to enterprise systems.',
      objectives: [
        'Master the four fundamental pillars of OOP: Encapsulation, Inheritance, Polymorphism, and Abstraction',
        'Understand the relationship between classes, objects, attributes, and methods',
        'Learn how OOP models real-world entities and relationships in code',
        'Discover the advantages of OOP over procedural programming approaches',
        'Explore how major software systems leverage OOP principles',
        'Understand design principles: cohesion, coupling, and SOLID fundamentals',
        'Learn to think in objects and identify OOP opportunities in problem-solving'
      ],
      theory: `
        <div class="bg-gradient-to-r from-indigo-600 to-purple-600 text-white p-6 rounded-lg mb-8 shadow-2xl">
          <h1 class="text-3xl font-bold m-0 flex items-center">
            <span class="w-3 h-10 bg-white rounded mr-4"></span>
            Introduction to Object-Oriented Programming
          </h1>
          <p class="mt-3 text-indigo-100 text-lg">Discover the programming paradigm that powers modern software development</p>
        </div>

        <div class="space-y-8">
          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-indigo-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-indigo-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">1</span>
              What is Object-Oriented Programming?
            </h2>
            <div class="space-y-4">
              <p class="text-gray-700 leading-relaxed text-lg">
                Object-Oriented Programming (OOP) is a programming paradigm that organizes software design around 
                <strong>objects</strong> rather than functions and procedures. Think of objects as digital representations 
                of real-world entities - they contain both <em>data</em> (attributes) and <em>behavior</em> (methods) that work together.
              </p>
              <div class="bg-indigo-50 p-4 rounded-lg border-l-4 border-indigo-400">
                <h4 class="font-bold text-indigo-800 mb-2">üí° Real-World Analogy</h4>
                <p class="text-indigo-700">Consider a car: it has attributes (color, model, fuel level) and behaviors (start, accelerate, brake). In OOP, we create a Car class that captures these attributes and behaviors, then create car objects (instances) from this blueprint.</p>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-purple-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-purple-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">2</span>
              The Four Pillars of OOP
            </h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div class="space-y-4">
                <div class="bg-blue-50 p-4 rounded-lg border border-blue-200">
                  <h4 class="font-bold text-blue-800 mb-2 flex items-center">
                    <span class="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs mr-2">üèõÔ∏è</span>
                    Encapsulation
                  </h4>
                  <p class="text-blue-700 text-sm mb-2">Bundle data and methods together while controlling access</p>
                  <ul class="text-xs text-blue-600 space-y-1">
                    <li>‚Ä¢ Hide internal implementation details</li>
                    <li>‚Ä¢ Provide controlled access through methods</li>
                    <li>‚Ä¢ Protect data integrity and consistency</li>
                  </ul>
                </div>
                <div class="bg-green-50 p-4 rounded-lg border border-green-200">
                  <h4 class="font-bold text-green-800 mb-2 flex items-center">
                    <span class="bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs mr-2">üß¨</span>
                    Inheritance
                  </h4>
                  <p class="text-green-700 text-sm mb-2">Create new classes based on existing ones</p>
                  <ul class="text-xs text-green-600 space-y-1">
                    <li>‚Ä¢ Reuse existing code and functionality</li>
                    <li>‚Ä¢ Establish "is-a" relationships</li>
                    <li>‚Ä¢ Enable code specialization and extension</li>
                  </ul>
                </div>
              </div>
              <div class="space-y-4">
                <div class="bg-orange-50 p-4 rounded-lg border border-orange-200">
                  <h4 class="font-bold text-orange-800 mb-2 flex items-center">
                    <span class="bg-orange-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs mr-2">üé≠</span>
                    Polymorphism
                  </h4>
                  <p class="text-orange-700 text-sm mb-2">One interface, multiple implementations</p>
                  <ul class="text-xs text-orange-600 space-y-1">
                    <li>‚Ä¢ Use same method names for different behaviors</li>
                    <li>‚Ä¢ Enable flexible and extensible code</li>
                    <li>‚Ä¢ Support runtime method resolution</li>
                  </ul>
                </div>
                <div class="bg-red-50 p-4 rounded-lg border border-red-200">
                  <h4 class="font-bold text-red-800 mb-2 flex items-center">
                    <span class="bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs mr-2">üé®</span>
                    Abstraction
                  </h4>
                  <p class="text-red-700 text-sm mb-2">Focus on essential features, hide complexity</p>
                  <ul class="text-xs text-red-600 space-y-1">
                    <li>‚Ä¢ Define what an object does, not how</li>
                    <li>‚Ä¢ Create clear, simple interfaces</li>
                    <li>‚Ä¢ Reduce cognitive load and complexity</li>
                  </ul>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-green-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-green-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">3</span>
              OOP vs Procedural Programming
            </h2>
            <div class="overflow-x-auto">
              <table class="w-full text-sm">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="text-left p-3 font-bold text-gray-800">Aspect</th>
                    <th class="text-left p-3 font-bold text-blue-600">Procedural Programming</th>
                    <th class="text-left p-3 font-bold text-green-600">Object-Oriented Programming</th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                  <tr>
                    <td class="p-3 font-medium">Code Organization</td>
                    <td class="p-3 text-blue-700">Functions and procedures</td>
                    <td class="p-3 text-green-700">Classes and objects</td>
                  </tr>
                  <tr class="bg-gray-50">
                    <td class="p-3 font-medium">Data Handling</td>
                    <td class="p-3 text-blue-700">Global variables, passed parameters</td>
                    <td class="p-3 text-green-700">Encapsulated within objects</td>
                  </tr>
                  <tr>
                    <td class="p-3 font-medium">Problem Solving</td>
                    <td class="p-3 text-blue-700">Top-down approach</td>
                    <td class="p-3 text-green-700">Bottom-up, modular approach</td>
                  </tr>
                  <tr class="bg-gray-50">
                    <td class="p-3 font-medium">Reusability</td>
                    <td class="p-3 text-blue-700">Limited, through function calls</td>
                    <td class="p-3 text-green-700">High, through inheritance and composition</td>
                  </tr>
                  <tr>
                    <td class="p-3 font-medium">Maintenance</td>
                    <td class="p-3 text-blue-700">Difficult for large systems</td>
                    <td class="p-3 text-green-700">Easier, modular structure</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </section>

          <section class="bg-white p-6 rounded-lg shadow-lg border-l-4 border-yellow-500">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span class="bg-yellow-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-bold">4</span>
              OOP in Action: Real-World Examples
            </h2>
            <div class="grid md:grid-cols-2 gap-6">
              <div>
                <h4 class="font-bold text-gray-800 mb-3">üè¶ Banking System</h4>
                <div class="space-y-2 text-sm">
                  <div class="bg-blue-50 p-3 rounded border border-blue-200">
                    <strong class="text-blue-800">Classes:</strong> Account, Customer, Transaction, ATM
                  </div>
                  <div class="bg-green-50 p-3 rounded border border-green-200">
                    <strong class="text-green-800">Inheritance:</strong> SavingsAccount, CheckingAccount extend Account
                  </div>
                  <div class="bg-purple-50 p-3 rounded border border-purple-200">
                    <strong class="text-purple-800">Polymorphism:</strong> Different account types calculate interest differently
                  </div>
                </div>
              </div>
              <div>
                <h4 class="font-bold text-gray-800 mb-3">üéÆ Game Development</h4>
                <div class="space-y-2 text-sm">
                  <div class="bg-orange-50 p-3 rounded border border-orange-200">
                    <strong class="text-orange-800">Classes:</strong> Player, Enemy, Weapon, Level, GameEngine
                  </div>
                  <div class="bg-red-50 p-3 rounded border border-red-200">
                    <strong class="text-red-800">Inheritance:</strong> Warrior, Mage, Archer extend Player
                  </div>
                  <div class="bg-indigo-50 p-3 rounded border border-indigo-200">
                    <strong class="text-indigo-800">Encapsulation:</strong> Health, experience hidden in Player
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="bg-gradient-to-r from-gray-100 to-gray-200 p-6 rounded-lg">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">üéØ Design Principles</h2>
            <div class="grid md:grid-cols-3 gap-4">
              <div class="text-center">
                <div class="bg-blue-500 text-white rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-2 text-xl">üîó</div>
                <h4 class="font-bold mb-2">High Cohesion</h4>
                <p class="text-sm text-gray-600">Each class should have a single, well-defined responsibility</p>
              </div>
              <div class="text-center">
                <div class="bg-green-500 text-white rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-2 text-xl">üîÄ</div>
                <h4 class="font-bold mb-2">Low Coupling</h4>
                <p class="text-sm text-gray-600">Minimize dependencies between different classes</p>
              </div>
              <div class="text-center">
                <div class="bg-purple-500 text-white rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-2 text-xl">üéØ</div>
                <h4 class="font-bold mb-2">Clear Interfaces</h4>
                <p class="text-sm text-gray-600">Design simple, intuitive ways for objects to interact</p>
              </div>
            </div>
          </section>
        </div>
      `,
      codeExample: `/**
 * OOPDemonstration.java
 * 
 * This comprehensive example demonstrates core OOP concepts through
 * a practical library management system. It shows:
 * - Class definition and object creation
 * - Encapsulation with private fields and public methods
 * - Method implementation and object interaction
 * - Real-world modeling through objects
 * 
 * The example progresses from simple concepts to more complex interactions,
 * providing a foundation for advanced OOP topics in future lessons.
 */

// Define a Book class that encapsulates book information and behavior
class Book {
    // Private attributes (encapsulation) - data is hidden from direct access
    private String title;
    private String author;
    private int pages;
    private boolean isAvailable;
    private int timesRead;
    
    // Constructor - initializes a new Book object with required information
    public Book(String title, String author, int pages) {
        this.title = title;
        this.author = author;
        this.pages = pages;
        this.isAvailable = true;  // New books are available by default
        this.timesRead = 0;       // New books haven't been read yet
    }
    
    // Public methods (interface) - controlled way to interact with the object
    
    /**
     * Gets the book's title
     * @return the title of the book
     */
    public String getTitle() {
        return title;
    }
    
    /**
     * Gets the book's author
     * @return the author of the book
     */
    public String getAuthor() {
        return author;
    }
    
    /**
     * Gets the number of pages
     * @return the page count
     */
    public int getPages() {
        return pages;
    }
    
    /**
     * Checks if the book is currently available
     * @return true if available, false if checked out
     */
    public boolean isAvailable() {
        return isAvailable;
    }
    
    /**
     * Gets the number of times this book has been read
     * @return the read count
     */
    public int getTimesRead() {
        return timesRead;
    }
    
    /**
     * Borrow this book (if available)
     * @return true if successfully borrowed, false if not available
     */
    public boolean borrowBook() {
        if (isAvailable) {
            isAvailable = false;
            timesRead++;
            System.out.println("üìö You've borrowed: " + title);
            return true;
        } else {
            System.out.println("‚ùå Sorry, '" + title + "' is currently checked out.");
            return false;
        }
    }
    
    /**
     * Return this book to the library
     */
    public void returnBook() {
        if (!isAvailable) {
            isAvailable = true;
            System.out.println("üìö Thank you for returning: " + title);
        } else {
            System.out.println("‚ùå This book is already in the library.");
        }
    }
    
    /**
     * Display detailed information about this book
     */
    public void displayInfo() {
        String status = isAvailable ? "‚úÖ Available" : "‚ùå Checked out";
        System.out.println("====================================");
        System.out.println("üìñ Title: " + title);
        System.out.println("‚úçÔ∏è  Author: " + author);
        System.out.println("üìÑ Pages: " + pages);
        System.out.println("üìä Status: " + status);
        System.out.println("üìà Times Read: " + timesRead);
        System.out.println("====================================");
    }
    
    /**
     * Get a brief summary of the book
     * @return formatted string with key book information
     */
    public String getSummary() {
        return String.format("'%s' by %s (%d pages) - %s", 
                           title, author, pages, 
                           isAvailable ? "Available" : "Checked out");
    }
}

// Define a LibraryMember class to represent people who use the library
class LibraryMember {
    private String name;
    private int memberId;
    private int booksRead;
    
    // Constructor
    public LibraryMember(String name, int memberId) {
        this.name = name;
        this.memberId = memberId;
        this.booksRead = 0;
    }
    
    // Getter methods
    public String getName() {
        return name;
    }
    
    public int getMemberId() {
        return memberId;
    }
    
    public int getBooksRead() {
        return booksRead;
    }
    
    /**
     * Member borrows a book
     * @param book the book to borrow
     */
    public void borrowBook(Book book) {
        System.out.println("\nüë§ " + name + " is trying to borrow a book...");
        if (book.borrowBook()) {
            booksRead++;
            System.out.println("üéâ Success! " + name + " now has " + booksRead + " books read.");
        }
    }
    
    /**
     * Member returns a book
     * @param book the book to return
     */
    public void returnBook(Book book) {
        System.out.println("\nüë§ " + name + " is returning a book...");
        book.returnBook();
    }
    
    /**
     * Display member information
     */
    public void displayMemberInfo() {
        System.out.println("üë§ Library Member Information");
        System.out.println("   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        System.out.println("   Name: " + name);
        System.out.println("   Member ID: " + memberId);
        System.out.println("   Books Read: " + booksRead);
        System.out.println("   Status: " + (booksRead >= 10 ? "Premium Reader üåü" : "Regular Member"));
    }
}

// Main demonstration class showing OOP concepts in action
public class OOPDemonstration {
    
    public static void main(String[] args) {
        // Display program header
        printProgramHeader();
        
        // Create book objects (demonstrating object instantiation)
        Book book1 = new Book("The Java Programming Language", "James Gosling", 928);
        Book book2 = new Book("Clean Code", "Robert C. Martin", 464);
        Book book3 = new Book("Design Patterns", "Gang of Four", 395);
        
        // Create library members (more objects)
        LibraryMember alice = new LibraryMember("Alice Johnson", 1001);
        LibraryMember bob = new LibraryMember("Bob Smith", 1002);
        
        System.out.println("\nüìö LIBRARY CATALOG");
        System.out.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Display initial book information
        book1.displayInfo();
        book2.displayInfo();
        book3.displayInfo();
        
        System.out.println("\nüë• LIBRARY MEMBERS");
        System.out.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Display member information
        alice.displayMemberInfo();
        bob.displayMemberInfo();
        
        System.out.println("\nüìñ BORROWING SIMULATION");
        System.out.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Demonstrate object interaction and method calls
        alice.borrowBook(book1);  // Alice borrows Java book
        bob.borrowBook(book2);    // Bob borrows Clean Code
        alice.borrowBook(book2);  // Alice tries to borrow already borrowed book
        
        System.out.println("\nüìä UPDATED BOOK STATUS");
        System.out.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Show updated book states
        System.out.println(book1.getSummary());
        System.out.println(book2.getSummary());
        System.out.println(book3.getSummary());
        
        System.out.println("\nüìö RETURNING BOOKS");
        System.out.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Demonstrate returning books
        alice.returnBook(book1);
        bob.returnBook(book2);
        
        System.out.println("\nüë• FINAL MEMBER STATUS");
        System.out.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Show final member statistics
        alice.displayMemberInfo();
        bob.displayMemberInfo();
        
        // Demonstrate multiple borrowing for premium status
        System.out.println("\nüåü DEMONSTRATING PREMIUM STATUS");
        System.out.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // Alice reads multiple books to become premium member
        for (int i = 0; i < 9; i++) {
            alice.borrowBook(book1);
            alice.returnBook(book1);
        }
        
        alice.displayMemberInfo(); // Now Alice should be a premium reader
        
        printProgramFooter();
    }
    
    /**
     * Print welcome header for the demonstration program
     */
    private static void printProgramHeader() {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë           üìö OBJECT-ORIENTED PROGRAMMING DEMONSTRATION      ‚ïë");
        System.out.println("‚ïë                    Library Management System                 ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  This program demonstrates core OOP concepts:               ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Classes and Objects                                      ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Encapsulation (private fields, public methods)          ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ Object Interaction and Method Calling                   ‚ïë");
        System.out.println("‚ïë  ‚Ä¢ State Management and Data Integrity                     ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
    }
    
    /**
     * Print closing footer for the demonstration program
     */
    private static void printProgramFooter() {
        System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë                    üéâ DEMONSTRATION COMPLETE! üéâ            ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  You've seen OOP fundamentals in action:                    ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  ‚úÖ Objects encapsulate data and behavior                    ‚ïë");
        System.out.println("‚ïë  ‚úÖ Methods provide controlled access to object state       ‚ïë");
        System.out.println("‚ïë  ‚úÖ Objects interact through well-defined interfaces        ‚ïë");
        System.out.println("‚ïë  ‚úÖ Data integrity is maintained through validation         ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïë  Next: Learn inheritance, polymorphism, and abstraction!    ‚ïë");
        System.out.println("‚ïë                                                              ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
    }
}

/*
 * EXPECTED PROGRAM OUTPUT (ABBREVIATED):
 * 
 * ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 * ‚ïë           üìö OBJECT-ORIENTED PROGRAMMING DEMONSTRATION      ‚ïë
 * ‚ïë                    Library Management System                 ‚ïë
 * ‚ïë  This program demonstrates core OOP concepts:               ‚ïë
 * ‚ïë  ‚Ä¢ Classes and Objects                                      ‚ïë
 * ‚ïë  ‚Ä¢ Encapsulation (private fields, public methods)          ‚ïë
 * ‚ïë  ‚Ä¢ Object Interaction and Method Calling                   ‚ïë
 * ‚ïë  ‚Ä¢ State Management and Data Integrity                     ‚ïë
 * ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 * 
 * üìö LIBRARY CATALOG
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * ====================================
 * üìñ Title: The Java Programming Language
 * ‚úçÔ∏è  Author: James Gosling
 * üìÑ Pages: 928
 * üìä Status: ‚úÖ Available
 * üìà Times Read: 0
 * ====================================
 * 
 * ... (additional output showing borrowing, returning, and final status)
 * 
 * üåü DEMONSTRATING PREMIUM STATUS
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * üë§ Library Member Information
 *    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 *    Name: Alice Johnson
 *    Member ID: 1001
 *    Books Read: 10
 *    Status: Premium Reader üåü
 */`,
      exercise: `
        **üèóÔ∏è OOP Design and Implementation Challenge**
        
        This comprehensive exercise will help you apply OOP concepts to design and implement a complete system from scratch. You'll practice class design, object interaction, and the fundamental principles of object-oriented programming.
        
        **Part 1: System Design (45 minutes)**
        
        **Design Challenge: University Course Management System**
        
        You need to design a system to manage university courses, students, and instructors. Think about the real-world entities and their relationships:
        
        1. **Identify the Classes (15 minutes):**
           - List at least 5 classes you would need for this system
           - For each class, identify 4-5 attributes (properties) it should have
           - For each class, identify 4-5 behaviors (methods) it should provide
           - Think about how these classes relate to each other
        
        2. **Design Class Relationships (15 minutes):**
           - Which classes need to interact with each other?
           - What information needs to be shared between classes?
           - How would a student enroll in a course?
           - How would an instructor be assigned to a course?
           - Draw or describe the relationships between your classes
        
        3. **Apply OOP Principles (15 minutes):**
           - **Encapsulation:** Which attributes should be private? Why?
           - **Data Validation:** What rules should be enforced? (e.g., valid email format)
           - **Method Design:** What methods need parameters? What should they return?
           - **Object Interaction:** How do objects collaborate to accomplish tasks?
        
        **Part 2: Implementation (60 minutes)**
        
        Implement your design using the following requirements:
        
        1. **Student Class (20 minutes):**
           - Attributes: student ID, name, email, year level, GPA, enrolled courses
           - Methods: enroll in course, drop course, calculate GPA, display transcript
           - Validation: email format, GPA range (0.0-4.0), year level (1-4)
           - Encapsulation: private attributes with appropriate getters/setters
        
        2. **Course Class (20 minutes):**
           - Attributes: course code, title, credits, instructor, enrolled students, max capacity
           - Methods: add student, remove student, check capacity, display roster
           - Validation: credits must be positive, capacity limits
           - Business logic: prevent over-enrollment, maintain waiting list
        
        3. **Instructor Class (20 minutes):**
           - Attributes: instructor ID, name, department, courses taught, office hours
           - Methods: assign to course, set office hours, view teaching schedule
           - Interaction: ability to view enrolled students in their courses
        
        **Part 3: System Integration and Testing (45 minutes)**
        
        1. **Create a Demo Program (25 minutes):**
           - Create 3 students, 2 instructors, and 4 courses
           - Demonstrate student enrollment in multiple courses
           - Show course capacity limits working
           - Display student transcripts and course rosters
           - Implement and demonstrate a course search feature
        
        2. **Advanced Features (20 minutes):**
           - Add a method to find all courses a student is enrolled in
           - Implement a feature to find students with GPA above a certain threshold
           - Create a method to show an instructor's complete teaching load
           - Add functionality to handle prerequisite courses
        
        **Part 4: Real-World Extensions (30 minutes)**
        
        1. **Data Persistence Simulation (15 minutes):**
           - Add methods to export student data to a formatted string
           - Create a "saveToFile" simulation that prints what would be saved
           - Design a simple format for storing course information
        
        2. **Error Handling and Edge Cases (15 minutes):**
           - What happens if a student tries to enroll in a full course?
           - How do you handle invalid student IDs or course codes?
           - What validation is needed for instructor assignments?
           - Add appropriate error messages and handling
        
        **üìã Deliverables:**
        
        Create a complete Java program with the following:
        
        1. **Design Documentation:**
           - Class diagram or detailed written description of your design
           - List of attributes and methods for each class
           - Explanation of how classes interact
        
        2. **Source Code:**
           - Complete implementation of all classes
           - Comprehensive demo program showing all features
           - Proper commenting and documentation
           - Examples of encapsulation, validation, and object interaction
        
        3. **Test Results:**
           - Output showing your program working correctly
           - Demonstration of error handling and edge cases
           - Evidence that OOP principles are properly applied
        
        **üéØ Success Criteria:**
        
        Your solution demonstrates mastery when:
        - ‚úÖ Classes are well-designed with appropriate attributes and methods
        - ‚úÖ Proper encapsulation with private attributes and public interfaces
        - ‚úÖ Objects interact naturally and maintain data integrity
        - ‚úÖ Business rules are enforced through validation
        - ‚úÖ Code is readable, well-commented, and follows good practices
        - ‚úÖ The system handles edge cases gracefully
        - ‚úÖ Demonstrates clear understanding of OOP concepts
        
        **üí° Bonus Challenges:**
        
        1. **Advanced OOP:** Add a base Person class that Student and Instructor can extend
        2. **Collections:** Use arrays or ArrayList to manage collections of objects
        3. **Search and Sort:** Implement methods to search students by name or sort courses by enrollment
        4. **Business Logic:** Add course prerequisites and graduation requirements checking
        5. **Interface Design:** Create interfaces for common behaviors (e.g., Searchable, Displayable)
        
        **üìö Learning Outcomes:**
        
        By completing this exercise, you will:
        - Master the process of designing OOP systems from requirements
        - Understand how to model real-world entities as classes
        - Practice implementing encapsulation and data validation
        - Learn to design object interactions and method interfaces
        - Gain experience with business logic implementation
        - Develop skills in testing and validating OOP designs
        
        This comprehensive exercise bridges the gap between learning OOP concepts and applying them to solve real-world problems!
      `
    }
  },

  'lesson-3-2': {
    title: 'Classes and Objects',
    type: 'coding',
    duration: '35 min',
    module: 'Object-Oriented Programming',
    content: {
      overview: 'Create your own classes and instantiate objects. Learn fields, methods, and object interaction.',
      objectives: [
        'Define a class with fields and methods',
        'Instantiate objects and set/read fields',
        'Call instance methods that operate on state',
        'Understand reference vs value semantics for objects',
        'Use this to disambiguate fields and parameters'
      ],
      theory: '<div class="bg-gradient-to-r from-indigo-600 to-blue-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Classes and Objects</h1></div><p class="text-gray-700 mb-4">A class is a blueprint; an object is an instance of that blueprint. Methods define behavior using the object\'s state.</p><p class="text-gray-700">Use constructors and methods to establish valid state and provide operations.</p>',
      codeExample: 'public class Person {\n    String name;\n    int age;\n    void birthday() {\n        age++;\n        System.out.println(name + " just turned " + age + "!");\n    }\n    void rename(String name) {\n        this.name = name;\n    }\n}\n\nclass PersonDemo {\n    public static void main(String[] args) {\n        Person a = new Person();\n        a.rename("Alice");\n        a.age = 20;\n        a.birthday();\n        \n        Person b = new Person();\n        b.rename("Bob");\n        b.age = 25;\n        b.birthday();\n    }\n}',
      exercise: 'Create a Car class with brand, model, and mileage fields, plus drive(km) and showInfo() methods. Instantiate two cars and simulate a few drives.'
    }
  },

  'lesson-3-3': {
    title: 'Constructors and Methods',
    type: 'coding',
    duration: '40 min',
    module: 'Object-Oriented Programming',
    content: {
      overview: 'Master constructors for object initialization and advanced method concepts. Learn constructor overloading and the this keyword.',
      objectives: [
        'Understand constructor purpose and syntax',
        'Learn constructor overloading',
        'Master the this keyword usage',
        'Practice method chaining and fluent interfaces',
        'Create static factory methods as alternatives to constructors'
      ],
      theory: '<div class="bg-gradient-to-r from-indigo-600 to-blue-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Constructors and Methods</h1></div><p class="text-gray-700 mb-4">Constructors initialize objects to a valid state. Overload constructors to support different initialization pathways, and provide clear, well-named methods.</p>',
      codeExample: 'public class Person {\n    private String name;\n    private int age;\n    private String email;\n    \n    private Person(String name, int age, String email) {\n        this.name = name;\n        this.age = age;\n        this.email = email;\n    }\n    // Static factories\n    public static Person of(String name, int age) {\n        return new Person(name, age, "not-provided@example.com");\n    }\n    public static Person withEmail(String name, int age, String email) {\n        return new Person(name, age, email);\n    }\n    // Chainable mutators\n    public Person setName(String name) { this.name = name; return this; }\n    public Person setAge(int age) { this.age = age; return this; }\n    public Person setEmail(String email) { this.email = email; return this; }\n    public void displayInfo() {\n        System.out.println("Name: " + name + ", Age: " + age + ", Email: " + email);\n    }\n}\n\nclass PersonDemo {\n    public static void main(String[] args) {\n        Person p1 = Person.of("Alice", 25);\n        Person p2 = Person.withEmail("Bob", 30, "bob@email.com");\n        Person p3 = Person.of("Charlie", 22).setEmail("charlie@email.com");\n        p1.displayInfo();\n        p2.displayInfo();\n        p3.displayInfo();\n    }\n}',
      exercise: 'Create a Rectangle class with factories: square(side) and of(width, height). Include methods: area(), perimeter(), and displayInfo(). Demonstrate both factories.'
    }
  },

  'lesson-3-4': {
    title: 'Inheritance',
    type: 'lesson',
    duration: '45 min',
    module: 'Object-Oriented Programming',
    content: {
      overview: 'Learn how classes can inherit fields and methods from other classes, reuse code, and extend behavior.',
      objectives: [
        'Understand extends keyword and class hierarchy',
        'Use super to access parent constructors/methods',
        'Override methods in subclasses',
        'Design reusable class structures',
        'Know final, protected, and visibility implications'
      ],
      theory: '<div class="bg-gradient-to-r from-indigo-600 to-blue-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Inheritance</h1></div><p class="text-gray-700 mb-4">Inheritance allows a class (subclass) to acquire properties and behavior of another class (superclass). It promotes reuse and specialization.</p><ul class="list-disc pl-6 text-gray-700"><li>Use <code>extends</code> to create subtype relationships.</li><li>Call <code>super(...)</code> to invoke superclass constructors.</li><li>Annotate overrides with <code>@Override</code> to catch errors.</li><li>Use <code>final</code> to prevent overriding or inheritance.</li></ul>',
      codeExample: 'class Vehicle {\n    protected String brand;\n    protected int year;\n    Vehicle(String brand, int year) { this.brand = brand; this.year = year; }\n    void start() { System.out.println(brand + " starting..."); }\n}\nclass Car extends Vehicle {\n    String model;\n    Car(String brand, int year, String model) { super(brand, year); this.model = model; }\n    @Override void start() { super.start(); System.out.println("Car " + brand + " " + model + " ready!"); }\n}\nclass Truck extends Vehicle {\n    int capacityKg;\n    Truck(String brand, int year, int capacityKg) { super(brand, year); this.capacityKg = capacityKg; }\n    @Override void start() { System.out.println("Truck " + brand + " capacity=" + capacityKg + "kg"); }\n}\nclass InheritanceDemo {\n    public static void main(String[] args) {\n        Vehicle v = new Vehicle("Generic", 2000);\n        Car c = new Car("Toyota", 2022, "Camry");\n        Truck t = new Truck("Volvo", 2021, 5000);\n        v.start(); c.start(); t.start();\n    }\n}',
      exercise: 'Create a base class Appliance with power and brand. Derive classes Fan and AirConditioner that override turnOn() method and add their own properties. Demonstrate super() and overriding.'
    }
  },

  'lesson-3-5': {
    title: 'Polymorphism',
    type: 'lesson',
    duration: '35 min',
    module: 'Object-Oriented Programming',
    content: {
      overview: 'Use a common type to refer to multiple subclass objects and invoke overridden behavior dynamically.',
      objectives: [
        'Understand method overriding and dynamic dispatch',
        'Use base-class references to call subclass implementations',
        'Design APIs that depend on abstractions rather than concretes',
        'Recognize compile-time vs run-time polymorphism',
        'Know when to downcast carefully'
      ],
      theory: '<div class="bg-gradient-to-r from-indigo-600 to-blue-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Polymorphism</h1></div><p class="text-gray-700 mb-4">Polymorphism lets you treat objects of different subclasses uniformly through a common superclass or interface, and execute the appropriate overridden method at runtime.</p><p class="text-gray-700">Prefer programming to interfaces to maximize flexibility.</p>',
      codeExample: 'class Animal { void speak() { System.out.println("Animal speaks"); } }\nclass Dog extends Animal { @Override void speak() { System.out.println("Woof"); } }\nclass Cat extends Animal { @Override void speak() { System.out.println("Meow"); } }\nclass PolyDemo {\n    static void makeItSpeak(Animal a) { a.speak(); }\n    public static void main(String[] args) {\n        Animal[] animals = { new Dog(), new Cat(), new Dog() };\n        for (Animal a : animals) makeItSpeak(a);\n        // Downcast (use instanceof)\n        Animal a = new Dog();\n        if (a instanceof Dog) { Dog d = (Dog) a; d.speak(); }\n    }\n}',
      exercise: 'Create a Shape hierarchy with a base class having area() method. Implement Circle and Rectangle, override area(), and pass them to a function that prints area polymorphically.'
    }
  },

  'lesson-3-6': {
    title: 'Encapsulation',
    type: 'lesson',
    duration: '30 min',
    module: 'Object-Oriented Programming',
    content: {
      overview: 'Protect internal object state with access modifiers and expose well-defined methods for interaction.',
      objectives: [
        'Use private fields with public getters/setters',
        'Validate and guard state changes',
        'Hide implementation details',
        'Design robust, maintainable classes',
        'Understand immutability and defensive copies briefly'
      ],
      theory: '<div class="bg-gradient-to-r from-indigo-600 to-blue-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Encapsulation</h1></div><p class="text-gray-700 mb-4">Encapsulation bundles data and methods while restricting direct access to internal state. Use access modifiers (private, protected, public, package-private) and provide controlled methods.</p><p class="text-gray-700">Consider making classes immutable when possible and use defensive copies for mutable fields.</p>',
      codeExample: 'public class Employee {\n    // Private instance variables - encapsulated data\n    private String name;\n    private int employeeId;\n    private double salary;\n    private String department;\n    private boolean active;\n\n    // Constructor\n    public Employee(String name, int employeeId, double salary, String department) {\n        setName(name);\n        this.employeeId = employeeId;\n        updateSalary(salary);\n        setDepartment(department);\n        this.active = true;\n    }\n\n    // Public getter methods - controlled access\n    public String getName() { return name; }\n    public int getEmployeeId() { return employeeId; }\n    public String getDepartment() { return department; }\n    public boolean isActive() { return active; }\n    public double getSalary() { return active ? salary : 0.0; }\n\n    // Controlled mutators with validation\n    public void setName(String name) { if (name != null && !name.trim().isEmpty()) this.name = name.trim(); }\n    public void setDepartment(String department) { if (department != null && !department.trim().isEmpty()) this.department = department.trim(); }\n    public void updateSalary(double newSalary) { if (newSalary >= 0) this.salary = newSalary; }\n    public void changeSalaryBy(double delta) { double s = this.salary + delta; if (s >= 0) this.salary = s; }\n    public void deactivate() { this.active = false; }\n    public void activate() { this.active = true; }\n    public void display() { System.out.println("Employee(" + employeeId + ") " + name + ", dept=" + department + ", salary=" + salary + ", active=" + active); }\n}\n\nclass EncapsulationDemo {\n    public static void main(String[] args) {\n        Employee e = new Employee("Alice", 1001, 75000, "Engineering");\n        e.display();\n        e.changeSalaryBy(2500);\n        e.setDepartment("R&D");\n        e.display();\n        e.deactivate();\n        System.out.println("Visible salary when inactive: " + e.getSalary());\n    }\n}',
      exercise: 'Refactor a Student class to keep all fields private. Add validation in setters (e.g., non-empty name, age >= 0), and provide a method to print a masked ID.'
    }
  },

  'lesson-3-7': {
    title: 'Abstract Classes and Interfaces',
    type: 'coding',
    duration: '40 min',
    module: 'Object-Oriented Programming',
    content: {
      overview: 'Define abstract contracts and implement them with concrete classes. Learn when to use abstract classes vs interfaces.',
      objectives: [
        'Declare abstract classes with abstract methods',
        'Define and implement interfaces',
        'Use polymorphism with abstract types',
        'Understand multiple interface implementation',
        'Use default methods in interfaces (Java 8+)'
      ],
      theory: '<div class="bg-gradient-to-r from-indigo-600 to-blue-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Abstract Classes and Interfaces</h1></div><p class="text-gray-700 mb-4">Abstract classes can contain implemented and abstract methods; interfaces define a pure contract. Choose abstract classes for shared base state/behavior and interfaces for roles/capabilities.</p>',
      codeExample: 'abstract class Shape { abstract double area(); }\ninterface Drawable { void draw(); default void info() { System.out.println("Drawable"); } }\nclass Circle extends Shape implements Drawable {\n    double r; Circle(double r) { this.r = r; }\n    @Override double area() { return Math.PI * r * r; }\n    @Override public void draw() { System.out.println("Drawing Circle with r=" + r); }\n}\nclass Rectangle extends Shape implements Drawable {\n    double w, h; Rectangle(double w, double h) { this.w = w; this.h = h; }\n    @Override double area() { return w * h; }\n    @Override public void draw() { System.out.println("Drawing Rectangle " + w + "x" + h); }\n}\nclass AbstractDemo {\n    public static void main(String[] args) {\n        Shape s1 = new Circle(3);\n        Shape s2 = new Rectangle(4, 5);\n        System.out.println("Areas:");\n        System.out.println(s1.area());\n        System.out.println(s2.area());\n        Drawable[] ds = { (Drawable) s1, (Drawable) s2 };\n        for (Drawable d : ds) { d.info(); d.draw(); }\n    }\n}',
      exercise: 'Create an abstract class Account with abstract method calculateInterest(). Implement SavingsAccount and CurrentAccount with distinct interest calculations. Demonstrate polymorphic calls.'
    }
  },

  // Module 4: Arrays and Strings (5 lessons)
  // 4-1 Introduction to Arrays (lesson, 25 min)
  // 4-2 Multidimensional Arrays (coding, 30 min)
  // 4-3 String Class and Methods (lesson, 35 min)
  // 4-4 StringBuilder and StringBuffer (lesson, 25 min)
  // 4-5 Array and String Algorithms (coding, 40 min)

  'lesson-4-1': {
    title: 'Introduction to Arrays',
    type: 'lesson',
    duration: '25 min',
    module: 'Arrays and Strings',
    content: {
      overview: 'Learn how to declare, initialize, and use arrays to store multiple values of the same type efficiently.',
      objectives: [
        'Declare and initialize arrays',
        'Understand indexing and default values',
        'Iterate with for and for-each loops',
        'Use common utility methods (java.util.Arrays)'
      ],
      theory: '<div class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Introduction to Arrays</h1></div><p class="text-gray-700 mb-4">Arrays store fixed-size sequences of elements of the same type. Indexing starts at 0.</p><ul class="list-disc pl-6 text-gray-700"><li>Declaration: <code>int[] a;</code> Initialization: <code>int[] a = new int[5];</code></li><li>Default values: numeric types -> 0, boolean -> false, object refs -> null</li><li>Iteration: traditional for, enhanced for-each</li><li>Utilities: <code>Arrays.toString</code>, <code>Arrays.sort</code>, <code>Arrays.copyOf</code></li></ul>',
      codeExample: 'import java.util.Arrays;\npublic class ArraysIntro {\n    public static void main(String[] args) {\n        int[] a = new int[5]; // {0,0,0,0,0}\n        for (int i = 0; i < a.length; i++) a[i] = i * i;\n        System.out.println(Arrays.toString(a));\n        int[] b = {5,3,1,4,2};\n        Arrays.sort(b);\n        System.out.println("Sorted: " + Arrays.toString(b));\n        for (int v : b) System.out.print(v + " ");\n    }\n}',
      exercise: 'Create an array of 10 integers, fill it with the first 10 even numbers, print them, and then print the sum and average.'
    }
  },

  'lesson-4-2': {
    title: 'Multidimensional Arrays',
    type: 'coding',
    duration: '30 min',
    module: 'Arrays and Strings',
    content: {
      overview: 'Work with 2D arrays (matrices) and jagged arrays. Learn initialization, traversal, and common operations.',
      objectives: [
        'Declare and initialize 2D arrays',
        'Traverse rows and columns',
        'Compute row/column sums',
        'Understand jagged (ragged) arrays'
      ],
      theory: '<div class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Multidimensional Arrays</h1></div><p class="text-gray-700 mb-4">A 2D array is an array of arrays. Dimensions can be rectangular or jagged.</p>',
      codeExample: 'public class MatrixOps {\n    public static void main(String[] args) {\n        int[][] m = { {1,2,3}, {4,5,6}, {7,8,9} };\n        // Print\n        for (int i = 0; i < m.length; i++) {\n            for (int j = 0; j < m[i].length; j++) {\n                System.out.print(m[i][j] + " ");\n            }\n            System.out.println();\n        }\n        // Row sums\n        for (int i = 0; i < m.length; i++) {\n            int sum = 0; for (int v : m[i]) sum += v;\n            System.out.println("Row " + i + " sum = " + sum);\n        }\n        // Jagged array\n        int[][] j = new int[3][];\n        j[0] = new int[]{1,2}; j[1] = new int[]{3,4,5}; j[2] = new int[]{6};\n        System.out.println("Jagged length[1]=" + j[1].length);\n    }\n}',
      exercise: 'Write code to compute the transpose of a 3x3 matrix and print the result. Then extend to check if a matrix is symmetric.'
    }
  },

  'lesson-4-3': {
    title: 'String Class and Methods',
    type: 'lesson',
    duration: '35 min',
    module: 'Arrays and Strings',
    content: {
      overview: 'Master Java String basics: immutability, creation, and common methods for searching and manipulation.',
      objectives: [
        'Understand String immutability',
        'Use key methods: length, charAt, substring, indexOf, equals',
        'Compare Strings correctly',
        'Split and join strings'
      ],
      theory: '<div class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">String Class and Methods</h1></div><p class="text-gray-700 mb-4">Strings are immutable sequences of characters. Methods return new String instances.</p><ul class="list-disc pl-6 text-gray-700"><li><code>length()</code>, <code>charAt()</code>, <code>substring()</code>, <code>indexOf()</code></li><li><code>equals()</code> vs <code>==</code></li><li><code>toLowerCase()</code>, <code>toUpperCase()</code>, <code>trim()</code></li><li><code>split()</code> and <code>String.join()</code></li></ul>',
      codeExample: 'public class StringBasics {\n    public static void main(String[] args) {\n        String s = "  Hello, Java!  ";\n        System.out.println(s.trim().toUpperCase());\n        System.out.println("Length=" + s.length());\n        System.out.println("Index of Java=" + s.indexOf("Java"));\n        String sub = s.substring(2, 7);\n        System.out.println("Sub=" + sub);\n        String[] parts = "a,b,c".split(",");\n        System.out.println(String.join("|", parts));\n        System.out.println("equals? " + "abc".equals(new String("abc")));\n    }\n}',
      exercise: 'Given an input sentence, print each word on a new line, count words, and find the longest word.'
    }
  },

  'lesson-4-4': {
    title: 'StringBuilder and StringBuffer',
    type: 'lesson',
    duration: '25 min',
    module: 'Arrays and Strings',
    content: {
      overview: 'Use mutable string types for efficient concatenation and in-place edits. Know when to use StringBuilder vs StringBuffer.',
      objectives: [
        'Understand mutability and performance benefits',
        'Use common methods: append, insert, delete, reverse',
        'Know thread-safety difference (StringBuffer is synchronized)',
        'Choose appropriately for single-threaded vs multi-threaded'
      ],
      theory: '<div class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">StringBuilder & StringBuffer</h1></div><p class="text-gray-700 mb-4">Use StringBuilder (faster, not thread-safe) by default; StringBuffer (thread-safe) when needed across threads.</p>',
      codeExample: 'public class BuilderDemo {\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder();\n        sb.append("Hello").append(", ").append("World");\n        sb.insert(5, " Java");\n        sb.delete(0, 1);\n        sb.reverse().reverse(); // demo\n        System.out.println(sb.toString());\n        // Buffer\n        StringBuffer buf = new StringBuffer("Count:");\n        for (int i = 1; i <= 5; i++) buf.append(" ").append(i);\n        System.out.println(buf.toString());\n    }\n}',
      exercise: 'Build a comma-separated string of the first 50 integers using StringBuilder, then reverse it and print both versions.'
    }
  },

  'lesson-4-5': {
    title: 'Array and String Algorithms',
    type: 'coding',
    duration: '40 min',
    module: 'Arrays and Strings',
    content: {
      overview: 'Practice core algorithms like reversing arrays, binary search, palindrome checks, and anagram detection.',
      objectives: [
        'Implement array reverse and binary search',
        'Check string palindrome',
        'Detect anagrams using counting or sorting',
        'Apply time complexity thinking'
      ],
      theory: '<div class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-4 rounded-lg mb-6 shadow-lg"><h1 class="text-2xl font-bold m-0">Array & String Algorithms</h1></div><p class="text-gray-700 mb-4">Algorithmic thinking with arrays and strings is foundational. Aim for clarity first, then efficiency.</p>',
      codeExample: 'import java.util.Arrays;\npublic class AlgoBasics {\n    static void reverse(int[] a) { int i=0,j=a.length-1; while(i<j){ int t=a[i]; a[i]=a[j]; a[j]=t; i++; j--; } }\n    static int binarySearch(int[] a, int key){ int l=0,r=a.length-1; while(l<=r){ int m=(l+r)/2; if(a[m]==key) return m; if(a[m]<key) l=m+1; else r=m-1; } return -1; }\n    static boolean isPalindrome(String s){ int i=0,j=s.length()-1; while(i<j){ if(s.charAt(i)!=s.charAt(j)) return false; i++; j--; } return true; }\n    static boolean isAnagram(String a, String b){ if(a.length()!=b.length()) return false; char[] x=a.toCharArray(), y=b.toCharArray(); Arrays.sort(x); Arrays.sort(y); return Arrays.equals(x,y); }\n    public static void main(String[] args){ int[] a={1,2,3,4,5}; reverse(a); System.out.println("rev="+Arrays.toString(a)); int[] b={1,3,5,7,9,11}; System.out.println("idx="+binarySearch(b,7)); System.out.println(isPalindrome("level")); System.out.println(isAnagram("listen","silent")); }\n}',
      exercise: 'Given an array of integers, remove duplicates and print the result (order can be changed). Then, write a function to rotate an array by k positions to the right.'
    }
  }
};
